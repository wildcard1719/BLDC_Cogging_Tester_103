
BLDC_Cogging_Tester_103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080081ac  080081ac  000091ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008230  08008230  0000a640  2**0
                  CONTENTS
  4 .ARM          00000000  08008230  08008230  0000a640  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008230  08008230  0000a640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008230  08008230  00009230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008234  08008234  00009234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000640  20000000  08008238  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  20000640  08008878  0000a640  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a50  08008878  0000aa50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a640  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118f4  00000000  00000000  0000a669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e5  00000000  00000000  0001bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  0001e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d75  00000000  00000000  0001f640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001812c  00000000  00000000  000203b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144f6  00000000  00000000  000384e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908ef  00000000  00000000  0004c9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd2c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000502c  00000000  00000000  000dd30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e2338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000640 	.word	0x20000640
 8000128:	00000000 	.word	0x00000000
 800012c:	08008194 	.word	0x08008194

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000644 	.word	0x20000644
 8000148:	08008194 	.word	0x08008194

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_d2iz>:
 80009f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009fc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a00:	d215      	bcs.n	8000a2e <__aeabi_d2iz+0x36>
 8000a02:	d511      	bpl.n	8000a28 <__aeabi_d2iz+0x30>
 8000a04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a0c:	d912      	bls.n	8000a34 <__aeabi_d2iz+0x3c>
 8000a0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a22:	bf18      	it	ne
 8000a24:	4240      	negne	r0, r0
 8000a26:	4770      	bx	lr
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a32:	d105      	bne.n	8000a40 <__aeabi_d2iz+0x48>
 8000a34:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	bf08      	it	eq
 8000a3a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_d2uiz>:
 8000a48:	004a      	lsls	r2, r1, #1
 8000a4a:	d211      	bcs.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a50:	d211      	bcs.n	8000a76 <__aeabi_d2uiz+0x2e>
 8000a52:	d50d      	bpl.n	8000a70 <__aeabi_d2uiz+0x28>
 8000a54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a5c:	d40e      	bmi.n	8000a7c <__aeabi_d2uiz+0x34>
 8000a5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_d2uiz+0x3a>
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	4770      	bx	lr
 8000a82:	f04f 0000 	mov.w	r0, #0
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <HAL_TIM_PeriodElapsedCallback>:





void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
	...

08000f98 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_I2C_MemRxCpltCallback+0x44>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d112      	bne.n	8000fd0 <HAL_I2C_MemRxCpltCallback+0x38>
    	i2c1_go = 1;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <HAL_I2C_MemRxCpltCallback+0x48>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
    	if(i2c1_proc == 1){ i2c1_proc = 2; }
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d102      	bne.n	8000fc0 <HAL_I2C_MemRxCpltCallback+0x28>
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	701a      	strb	r2, [r3, #0]
    	if(i2c1_proc == 3){
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d102      	bne.n	8000fd0 <HAL_I2C_MemRxCpltCallback+0x38>
    		i2c1_proc = 0;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
    	}
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	200005a8 	.word	0x200005a8
 8000fe4:	20000844 	.word	0x20000844

08000fe8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a05      	ldr	r2, [pc, #20]	@ (800100c <HAL_UART_TxCpltCallback+0x24>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d102      	bne.n	8001000 <HAL_UART_TxCpltCallback+0x18>
		uart1_go = 1;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_UART_TxCpltCallback+0x28>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
	}
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40013800 	.word	0x40013800
 8001010:	200005a9 	.word	0x200005a9

08001014 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a08      	ldr	r2, [pc, #32]	@ (8001044 <HAL_ADC_ConvCpltCallback+0x30>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d109      	bne.n	800103a <HAL_ADC_ConvCpltCallback+0x26>
		adc1_go = 1;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <HAL_ADC_ConvCpltCallback+0x34>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
		current_value = HAL_ADC_GetValue(hadc);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f001 fd3b 	bl	8002aa8 <HAL_ADC_GetValue>
 8001032:	4603      	mov	r3, r0
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b05      	ldr	r3, [pc, #20]	@ (800104c <HAL_ADC_ConvCpltCallback+0x38>)
 8001038:	801a      	strh	r2, [r3, #0]
	}
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40012400 	.word	0x40012400
 8001048:	200005aa 	.word	0x200005aa
 800104c:	20000848 	.word	0x20000848

08001050 <lpf_current>:
	motor_speed_cmd_prev = motor_speed_cmd;
	motor_accel_error = motor_accel_cmd - encoder_accel_filtered_dt;
}


double lpf_current(double input, double alpha){
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800105a:	e9c7 2300 	strd	r2, r3, [r7]
	double output = (alpha*input) + ((1.0-alpha)*lpf_current_output_prev);
 800105e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001062:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001066:	f7ff fa2d 	bl	80004c4 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4614      	mov	r4, r2
 8001070:	461d      	mov	r5, r3
 8001072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4911      	ldr	r1, [pc, #68]	@ (80010c0 <lpf_current+0x70>)
 800107c:	f7ff f86a 	bl	8000154 <__aeabi_dsub>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <lpf_current+0x74>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fa19 	bl	80004c4 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4620      	mov	r0, r4
 8001098:	4629      	mov	r1, r5
 800109a:	f7ff f85d 	bl	8000158 <__adddf3>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	lpf_current_output_prev = output;
 80010a6:	4907      	ldr	r1, [pc, #28]	@ (80010c4 <lpf_current+0x74>)
 80010a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010ac:	e9c1 2300 	strd	r2, r3, [r1]
	return output;
 80010b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdb0      	pop	{r4, r5, r7, pc}
 80010be:	bf00      	nop
 80010c0:	3ff00000 	.word	0x3ff00000
 80010c4:	20000858 	.word	0x20000858

080010c8 <lpf_speed>:

double lpf_speed(double input, double alpha){
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80010d2:	e9c7 2300 	strd	r2, r3, [r7]
	double output = (alpha*input) + ((1.0-alpha)*lpf_speed_output_prev);
 80010d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010de:	f7ff f9f1 	bl	80004c4 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010ee:	f04f 0000 	mov.w	r0, #0
 80010f2:	4911      	ldr	r1, [pc, #68]	@ (8001138 <lpf_speed+0x70>)
 80010f4:	f7ff f82e 	bl	8000154 <__aeabi_dsub>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <lpf_speed+0x74>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff f9dd 	bl	80004c4 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4620      	mov	r0, r4
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff f821 	bl	8000158 <__adddf3>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	lpf_speed_output_prev = output;
 800111e:	4907      	ldr	r1, [pc, #28]	@ (800113c <lpf_speed+0x74>)
 8001120:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
	return output;
 8001128:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bdb0      	pop	{r4, r5, r7, pc}
 8001136:	bf00      	nop
 8001138:	3ff00000 	.word	0x3ff00000
 800113c:	20000860 	.word	0x20000860

08001140 <dt_update>:


void dt_update(){
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
	T_prev = T;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <dt_update+0x30>)
 8001146:	881a      	ldrh	r2, [r3, #0]
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <dt_update+0x34>)
 800114a:	801a      	strh	r2, [r3, #0]
	T = TIM1->CNT;
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <dt_update+0x38>)
 800114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <dt_update+0x30>)
 8001154:	801a      	strh	r2, [r3, #0]
	dt = T - T_prev;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <dt_update+0x30>)
 8001158:	881a      	ldrh	r2, [r3, #0]
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <dt_update+0x34>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <dt_update+0x3c>)
 8001164:	801a      	strh	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000800 	.word	0x20000800
 8001174:	20000802 	.word	0x20000802
 8001178:	40012c00 	.word	0x40012c00
 800117c:	20000804 	.word	0x20000804

08001180 <encoder_dt_update>:

void encoder_dt_update(){
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	encoder_T_prev = encoder_T;
 8001184:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <encoder_dt_update+0x30>)
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <encoder_dt_update+0x34>)
 800118a:	801a      	strh	r2, [r3, #0]
	encoder_T = TIM1->CNT;
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <encoder_dt_update+0x38>)
 800118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <encoder_dt_update+0x30>)
 8001194:	801a      	strh	r2, [r3, #0]
	encoder_dt = encoder_T - encoder_T_prev;
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <encoder_dt_update+0x30>)
 8001198:	881a      	ldrh	r2, [r3, #0]
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <encoder_dt_update+0x34>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <encoder_dt_update+0x3c>)
 80011a4:	801a      	strh	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000080c 	.word	0x2000080c
 80011b4:	2000080e 	.word	0x2000080e
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	20000810 	.word	0x20000810

080011c0 <encoder_read>:


void encoder_read(){
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af02      	add	r7, sp, #8
	if(i2c1_proc == 0){
 80011c6:	4b76      	ldr	r3, [pc, #472]	@ (80013a0 <encoder_read+0x1e0>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	f040 80ca 	bne.w	8001366 <encoder_read+0x1a6>
		encoder_dt_update();
 80011d2:	f7ff ffd5 	bl	8001180 <encoder_dt_update>
		encoder_value_prev = encoder_value;
 80011d6:	4b73      	ldr	r3, [pc, #460]	@ (80013a4 <encoder_read+0x1e4>)
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	4b73      	ldr	r3, [pc, #460]	@ (80013a8 <encoder_read+0x1e8>)
 80011dc:	801a      	strh	r2, [r3, #0]
		encoder_value = ((i2c1_buf_H << 8) | i2c1_buf_L);
 80011de:	4b73      	ldr	r3, [pc, #460]	@ (80013ac <encoder_read+0x1ec>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	b21a      	sxth	r2, r3
 80011e6:	4b72      	ldr	r3, [pc, #456]	@ (80013b0 <encoder_read+0x1f0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b6c      	ldr	r3, [pc, #432]	@ (80013a4 <encoder_read+0x1e4>)
 80011f4:	801a      	strh	r2, [r3, #0]
		encoder_speed_prev = encoder_speed;
 80011f6:	4b6f      	ldr	r3, [pc, #444]	@ (80013b4 <encoder_read+0x1f4>)
 80011f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011fc:	4b6e      	ldr	r3, [pc, #440]	@ (80013b8 <encoder_read+0x1f8>)
 80011fe:	801a      	strh	r2, [r3, #0]
		encoder_speed = encoder_value - encoder_value_prev;
 8001200:	4b68      	ldr	r3, [pc, #416]	@ (80013a4 <encoder_read+0x1e4>)
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	4b68      	ldr	r3, [pc, #416]	@ (80013a8 <encoder_read+0x1e8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	b29b      	uxth	r3, r3
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b69      	ldr	r3, [pc, #420]	@ (80013b4 <encoder_read+0x1f4>)
 8001210:	801a      	strh	r2, [r3, #0]
		encoder_acc = encoder_speed - encoder_speed_prev;
 8001212:	4b68      	ldr	r3, [pc, #416]	@ (80013b4 <encoder_read+0x1f4>)
 8001214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b67      	ldr	r3, [pc, #412]	@ (80013b8 <encoder_read+0x1f8>)
 800121c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001220:	b29b      	uxth	r3, r3
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b64      	ldr	r3, [pc, #400]	@ (80013bc <encoder_read+0x1fc>)
 800122a:	801a      	strh	r2, [r3, #0]
		if(abs(encoder_acc) < 100){
 800122c:	4b63      	ldr	r3, [pc, #396]	@ (80013bc <encoder_read+0x1fc>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	2b00      	cmp	r3, #0
 8001234:	bfb8      	it	lt
 8001236:	425b      	neglt	r3, r3
 8001238:	b29b      	uxth	r3, r3
 800123a:	2b63      	cmp	r3, #99	@ 0x63
 800123c:	d87f      	bhi.n	800133e <encoder_read+0x17e>
			encoder_value_filtered = encoder_value;
 800123e:	4b59      	ldr	r3, [pc, #356]	@ (80013a4 <encoder_read+0x1e4>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	4b5f      	ldr	r3, [pc, #380]	@ (80013c0 <encoder_read+0x200>)
 8001244:	801a      	strh	r2, [r3, #0]
			encoder_speed_filtered = encoder_speed;
 8001246:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <encoder_read+0x1f4>)
 8001248:	f9b3 2000 	ldrsh.w	r2, [r3]
 800124c:	4b5d      	ldr	r3, [pc, #372]	@ (80013c4 <encoder_read+0x204>)
 800124e:	801a      	strh	r2, [r3, #0]
			encoder_speed_filtered_dt_prev = encoder_speed_filtered_dt;
 8001250:	4b5d      	ldr	r3, [pc, #372]	@ (80013c8 <encoder_read+0x208>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	495d      	ldr	r1, [pc, #372]	@ (80013cc <encoder_read+0x20c>)
 8001258:	e9c1 2300 	strd	r2, r3, [r1]
			encoder_speed_filtered_dt = (double)encoder_speed_filtered / (double)encoder_dt * 1000;
 800125c:	4b59      	ldr	r3, [pc, #356]	@ (80013c4 <encoder_read+0x204>)
 800125e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f8c4 	bl	80003f0 <__aeabi_i2d>
 8001268:	4604      	mov	r4, r0
 800126a:	460d      	mov	r5, r1
 800126c:	4b58      	ldr	r3, [pc, #352]	@ (80013d0 <encoder_read+0x210>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f8ad 	bl	80003d0 <__aeabi_ui2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff fa4b 	bl	8000718 <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	4b51      	ldr	r3, [pc, #324]	@ (80013d4 <encoder_read+0x214>)
 8001290:	f7ff f918 	bl	80004c4 <__aeabi_dmul>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	494b      	ldr	r1, [pc, #300]	@ (80013c8 <encoder_read+0x208>)
 800129a:	e9c1 2300 	strd	r2, r3, [r1]
			encoder_accel_filtered_dt = (encoder_speed_filtered_dt - encoder_speed_filtered_dt_prev) / (double)encoder_dt * 1000;
 800129e:	4b4a      	ldr	r3, [pc, #296]	@ (80013c8 <encoder_read+0x208>)
 80012a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a4:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <encoder_read+0x20c>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7fe ff53 	bl	8000154 <__aeabi_dsub>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	4b46      	ldr	r3, [pc, #280]	@ (80013d0 <encoder_read+0x210>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f888 	bl	80003d0 <__aeabi_ui2d>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4620      	mov	r0, r4
 80012c6:	4629      	mov	r1, r5
 80012c8:	f7ff fa26 	bl	8000718 <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b3e      	ldr	r3, [pc, #248]	@ (80013d4 <encoder_read+0x214>)
 80012da:	f7ff f8f3 	bl	80004c4 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	493d      	ldr	r1, [pc, #244]	@ (80013d8 <encoder_read+0x218>)
 80012e4:	e9c1 2300 	strd	r2, r3, [r1]
		if(encoder_speed > 4000){ encoder_turn -= 1; }
 80012e8:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <encoder_read+0x1f4>)
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80012f2:	dd08      	ble.n	8001306 <encoder_read+0x146>
 80012f4:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <encoder_read+0x21c>)
 80012f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b21a      	sxth	r2, r3
 8001302:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <encoder_read+0x21c>)
 8001304:	801a      	strh	r2, [r3, #0]
		if(encoder_speed < -4000){ encoder_turn += 1; }
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <encoder_read+0x1f4>)
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 8001310:	da08      	bge.n	8001324 <encoder_read+0x164>
 8001312:	4b32      	ldr	r3, [pc, #200]	@ (80013dc <encoder_read+0x21c>)
 8001314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001318:	b29b      	uxth	r3, r3
 800131a:	3301      	adds	r3, #1
 800131c:	b29b      	uxth	r3, r3
 800131e:	b21a      	sxth	r2, r3
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <encoder_read+0x21c>)
 8001322:	801a      	strh	r2, [r3, #0]
		encoder_value_multi_turn = encoder_turn * 4096 + encoder_value_filtered;
 8001324:	4b2d      	ldr	r3, [pc, #180]	@ (80013dc <encoder_read+0x21c>)
 8001326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132a:	b29b      	uxth	r3, r3
 800132c:	031b      	lsls	r3, r3, #12
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b23      	ldr	r3, [pc, #140]	@ (80013c0 <encoder_read+0x200>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	4413      	add	r3, r2
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b29      	ldr	r3, [pc, #164]	@ (80013e0 <encoder_read+0x220>)
 800133c:	801a      	strh	r2, [r3, #0]
		}
		if(HAL_I2C_Mem_Read_IT(&hi2c1, (ADDR_ENCODER << 1), ADDR_REG_ANGLE_H, 1, &i2c1_buf_H, 1U) == HAL_OK){ i2c1_proc = 1; }
 800133e:	2301      	movs	r3, #1
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <encoder_read+0x1ec>)
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	220c      	movs	r2, #12
 800134a:	216c      	movs	r1, #108	@ 0x6c
 800134c:	4825      	ldr	r0, [pc, #148]	@ (80013e4 <encoder_read+0x224>)
 800134e:	f002 fb8d 	bl	8003a6c <HAL_I2C_Mem_Read_IT>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <encoder_read+0x1a0>
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <encoder_read+0x1e0>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e002      	b.n	8001366 <encoder_read+0x1a6>
		else{ i2c1_err = 1; }
 8001360:	4b21      	ldr	r3, [pc, #132]	@ (80013e8 <encoder_read+0x228>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
	}
	if(i2c1_proc == 2){
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <encoder_read+0x1e0>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d113      	bne.n	8001398 <encoder_read+0x1d8>
		if(HAL_I2C_Mem_Read_IT(&hi2c1, (ADDR_ENCODER << 1), ADDR_REG_ANGLE_L, 1, &i2c1_buf_L, 1U) == HAL_OK){ i2c1_proc = 3; }
 8001370:	2301      	movs	r3, #1
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <encoder_read+0x1f0>)
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	220d      	movs	r2, #13
 800137c:	216c      	movs	r1, #108	@ 0x6c
 800137e:	4819      	ldr	r0, [pc, #100]	@ (80013e4 <encoder_read+0x224>)
 8001380:	f002 fb74 	bl	8003a6c <HAL_I2C_Mem_Read_IT>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <encoder_read+0x1d2>
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <encoder_read+0x1e0>)
 800138c:	2203      	movs	r2, #3
 800138e:	701a      	strb	r2, [r3, #0]
		else{ i2c1_err = 1;}
	}
}
 8001390:	e002      	b.n	8001398 <encoder_read+0x1d8>
		else{ i2c1_err = 1;}
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <encoder_read+0x228>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bdb0      	pop	{r4, r5, r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000844 	.word	0x20000844
 80013a4:	20000814 	.word	0x20000814
 80013a8:	20000816 	.word	0x20000816
 80013ac:	20000812 	.word	0x20000812
 80013b0:	20000813 	.word	0x20000813
 80013b4:	20000818 	.word	0x20000818
 80013b8:	2000081a 	.word	0x2000081a
 80013bc:	2000081c 	.word	0x2000081c
 80013c0:	2000081e 	.word	0x2000081e
 80013c4:	20000820 	.word	0x20000820
 80013c8:	20000828 	.word	0x20000828
 80013cc:	20000830 	.word	0x20000830
 80013d0:	20000810 	.word	0x20000810
 80013d4:	408f4000 	.word	0x408f4000
 80013d8:	20000838 	.word	0x20000838
 80013dc:	20000842 	.word	0x20000842
 80013e0:	20000840 	.word	0x20000840
 80013e4:	2000068c 	.word	0x2000068c
 80013e8:	20000845 	.word	0x20000845

080013ec <spwm>:


void spwm(uint16_t idx_1, uint8_t power){
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	80fb      	strh	r3, [r7, #6]
 80013f8:	4613      	mov	r3, r2
 80013fa:	717b      	strb	r3, [r7, #5]
	idx_1 %= 720;
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	091a      	lsrs	r2, r3, #4
 8001400:	494d      	ldr	r1, [pc, #308]	@ (8001538 <spwm+0x14c>)
 8001402:	fba1 1202 	umull	r1, r2, r1, r2
 8001406:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800140a:	fb01 f202 	mul.w	r2, r1, r2
 800140e:	1a9b      	subs	r3, r3, r2
 8001410:	80fb      	strh	r3, [r7, #6]

	uint16_t idx_2 = idx_1 + 240;
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	33f0      	adds	r3, #240	@ 0xf0
 8001416:	82fb      	strh	r3, [r7, #22]
	uint16_t idx_3 = idx_1 + 480;
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800141e:	82bb      	strh	r3, [r7, #20]
	idx_2 %= 720;
 8001420:	8afb      	ldrh	r3, [r7, #22]
 8001422:	091a      	lsrs	r2, r3, #4
 8001424:	4944      	ldr	r1, [pc, #272]	@ (8001538 <spwm+0x14c>)
 8001426:	fba1 1202 	umull	r1, r2, r1, r2
 800142a:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800142e:	fb01 f202 	mul.w	r2, r1, r2
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	82fb      	strh	r3, [r7, #22]
	idx_3 %= 720;
 8001436:	8abb      	ldrh	r3, [r7, #20]
 8001438:	091a      	lsrs	r2, r3, #4
 800143a:	493f      	ldr	r1, [pc, #252]	@ (8001538 <spwm+0x14c>)
 800143c:	fba1 1202 	umull	r1, r2, r1, r2
 8001440:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001444:	fb01 f202 	mul.w	r2, r1, r2
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	82bb      	strh	r3, [r7, #20]
	float u = ((float)spwm_arr[idx_1] * (float)power / 255.0);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4a3b      	ldr	r2, [pc, #236]	@ (800153c <spwm+0x150>)
 8001450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fbcd 	bl	8000bf4 <__aeabi_ui2f>
 800145a:	4604      	mov	r4, r0
 800145c:	797b      	ldrb	r3, [r7, #5]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fbc8 	bl	8000bf4 <__aeabi_ui2f>
 8001464:	4603      	mov	r3, r0
 8001466:	4619      	mov	r1, r3
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff fc1b 	bl	8000ca4 <__aeabi_fmul>
 800146e:	4603      	mov	r3, r0
 8001470:	4933      	ldr	r1, [pc, #204]	@ (8001540 <spwm+0x154>)
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fcca 	bl	8000e0c <__aeabi_fdiv>
 8001478:	4603      	mov	r3, r0
 800147a:	613b      	str	r3, [r7, #16]
	float v = ((float)spwm_arr[idx_2] * (float)power / 255.0);
 800147c:	8afb      	ldrh	r3, [r7, #22]
 800147e:	4a2f      	ldr	r2, [pc, #188]	@ (800153c <spwm+0x150>)
 8001480:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fbb5 	bl	8000bf4 <__aeabi_ui2f>
 800148a:	4604      	mov	r4, r0
 800148c:	797b      	ldrb	r3, [r7, #5]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fbb0 	bl	8000bf4 <__aeabi_ui2f>
 8001494:	4603      	mov	r3, r0
 8001496:	4619      	mov	r1, r3
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff fc03 	bl	8000ca4 <__aeabi_fmul>
 800149e:	4603      	mov	r3, r0
 80014a0:	4927      	ldr	r1, [pc, #156]	@ (8001540 <spwm+0x154>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fcb2 	bl	8000e0c <__aeabi_fdiv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	60fb      	str	r3, [r7, #12]
	float w = ((float)spwm_arr[idx_3] * (float)power / 255.0);
 80014ac:	8abb      	ldrh	r3, [r7, #20]
 80014ae:	4a23      	ldr	r2, [pc, #140]	@ (800153c <spwm+0x150>)
 80014b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fb9d 	bl	8000bf4 <__aeabi_ui2f>
 80014ba:	4604      	mov	r4, r0
 80014bc:	797b      	ldrb	r3, [r7, #5]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fb98 	bl	8000bf4 <__aeabi_ui2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4619      	mov	r1, r3
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff fbeb 	bl	8000ca4 <__aeabi_fmul>
 80014ce:	4603      	mov	r3, r0
 80014d0:	491b      	ldr	r1, [pc, #108]	@ (8001540 <spwm+0x154>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc9a 	bl	8000e0c <__aeabi_fdiv>
 80014d8:	4603      	mov	r3, r0
 80014da:	60bb      	str	r3, [r7, #8]

	TIM2->CCR2 = (uint16_t)(u + 0.5f);
 80014dc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80014e0:	6938      	ldr	r0, [r7, #16]
 80014e2:	f7ff fad7 	bl	8000a94 <__addsf3>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fd2b 	bl	8000f44 <__aeabi_f2uiz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014f6:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = (uint16_t)(v + 0.5f);
 80014f8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7ff fac9 	bl	8000a94 <__addsf3>
 8001502:	4603      	mov	r3, r0
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fd1d 	bl	8000f44 <__aeabi_f2uiz>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = (uint16_t)(w + 0.5f);
 8001514:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001518:	68b8      	ldr	r0, [r7, #8]
 800151a:	f7ff fabb 	bl	8000a94 <__addsf3>
 800151e:	4603      	mov	r3, r0
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fd0f 	bl	8000f44 <__aeabi_f2uiz>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800152e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001530:	bf00      	nop
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	05b05b06 	.word	0x05b05b06
 800153c:	20000000 	.word	0x20000000
 8001540:	437f0000 	.word	0x437f0000

08001544 <torque>:


void torque(int16_t v){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	if(v > 255){ v = 255; }
 800154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001552:	2bff      	cmp	r3, #255	@ 0xff
 8001554:	dd01      	ble.n	800155a <torque+0x16>
 8001556:	23ff      	movs	r3, #255	@ 0xff
 8001558:	80fb      	strh	r3, [r7, #6]
	if(v < -255){ v = -255; }
 800155a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155e:	f113 0fff 	cmn.w	r3, #255	@ 0xff
 8001562:	da02      	bge.n	800156a <torque+0x26>
 8001564:	f64f 7301 	movw	r3, #65281	@ 0xff01
 8001568:	80fb      	strh	r3, [r7, #6]

	uint16_t encoder = encoder_value_filtered + encoder_offset;
 800156a:	4b34      	ldr	r3, [pc, #208]	@ (800163c <torque+0xf8>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8001572:	4413      	add	r3, r2
 8001574:	81bb      	strh	r3, [r7, #12]
	encoder %= (uint16_t)(4096.0/7.0);
 8001576:	89ba      	ldrh	r2, [r7, #12]
 8001578:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <torque+0xfc>)
 800157a:	fba3 1302 	umull	r1, r3, r3, r2
 800157e:	1ad1      	subs	r1, r2, r3
 8001580:	0849      	lsrs	r1, r1, #1
 8001582:	440b      	add	r3, r1
 8001584:	0a59      	lsrs	r1, r3, #9
 8001586:	460b      	mov	r3, r1
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	0199      	lsls	r1, r3, #6
 800158e:	440b      	add	r3, r1
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	81bb      	strh	r3, [r7, #12]
	int16_t accelation = (int16_t)((float)encoder * 720.0 / 585.0);
 8001594:	89bb      	ldrh	r3, [r7, #12]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fb2c 	bl	8000bf4 <__aeabi_ui2f>
 800159c:	4603      	mov	r3, r0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ff38 	bl	8000414 <__aeabi_f2d>
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <torque+0x100>)
 80015aa:	f7fe ff8b 	bl	80004c4 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <torque+0x104>)
 80015bc:	f7ff f8ac 	bl	8000718 <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	f7ff fa16 	bl	80009f8 <__aeabi_d2iz>
 80015cc:	4603      	mov	r3, r0
 80015ce:	81fb      	strh	r3, [r7, #14]
	if(v >= 0){ accelation += 180; }
 80015d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db04      	blt.n	80015e2 <torque+0x9e>
 80015d8:	89fb      	ldrh	r3, [r7, #14]
 80015da:	33b4      	adds	r3, #180	@ 0xb4
 80015dc:	b29b      	uxth	r3, r3
 80015de:	81fb      	strh	r3, [r7, #14]
 80015e0:	e003      	b.n	80015ea <torque+0xa6>
	else { accelation -= 180; }
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	3bb4      	subs	r3, #180	@ 0xb4
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	81fb      	strh	r3, [r7, #14]
	if(accelation < 0){ accelation += 720; }
 80015ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da04      	bge.n	80015fc <torque+0xb8>
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	f503 7334 	add.w	r3, r3, #720	@ 0x2d0
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	81fb      	strh	r3, [r7, #14]
	accelation %= 720;
 80015fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001600:	4a12      	ldr	r2, [pc, #72]	@ (800164c <torque+0x108>)
 8001602:	fb82 1203 	smull	r1, r2, r2, r3
 8001606:	441a      	add	r2, r3
 8001608:	1251      	asrs	r1, r2, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	1a8a      	subs	r2, r1, r2
 800160e:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001612:	fb01 f202 	mul.w	r2, r1, r2
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	81fb      	strh	r3, [r7, #14]
	spwm(accelation, abs(v));
 800161a:	89fa      	ldrh	r2, [r7, #14]
 800161c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001620:	2b00      	cmp	r3, #0
 8001622:	bfb8      	it	lt
 8001624:	425b      	neglt	r3, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	4610      	mov	r0, r2
 800162e:	f7ff fedd 	bl	80013ec <spwm>
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	2000081e 	.word	0x2000081e
 8001640:	c01c01c1 	.word	0xc01c01c1
 8001644:	40868000 	.word	0x40868000
 8001648:	40824800 	.word	0x40824800
 800164c:	b60b60b7 	.word	0xb60b60b7

08001650 <motor_pid>:


void motor_pid(){
 8001650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
	motor_position_prev = motor_position;
 8001658:	4b7a      	ldr	r3, [pc, #488]	@ (8001844 <motor_pid+0x1f4>)
 800165a:	881a      	ldrh	r2, [r3, #0]
 800165c:	4b7a      	ldr	r3, [pc, #488]	@ (8001848 <motor_pid+0x1f8>)
 800165e:	801a      	strh	r2, [r3, #0]
	motor_speed_prev = motor_speed;
 8001660:	4b7a      	ldr	r3, [pc, #488]	@ (800184c <motor_pid+0x1fc>)
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	497a      	ldr	r1, [pc, #488]	@ (8001850 <motor_pid+0x200>)
 8001668:	e9c1 2300 	strd	r2, r3, [r1]
	motor_position = encoder_value_multi_turn;
 800166c:	4b79      	ldr	r3, [pc, #484]	@ (8001854 <motor_pid+0x204>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b73      	ldr	r3, [pc, #460]	@ (8001844 <motor_pid+0x1f4>)
 8001676:	801a      	strh	r2, [r3, #0]
	motor_speed = lpf_speed((double)(encoder_speed_filtered_dt), lpf_speed_alpha);
 8001678:	4b77      	ldr	r3, [pc, #476]	@ (8001858 <motor_pid+0x208>)
 800167a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167e:	4b77      	ldr	r3, [pc, #476]	@ (800185c <motor_pid+0x20c>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7ff fd20 	bl	80010c8 <lpf_speed>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	496f      	ldr	r1, [pc, #444]	@ (800184c <motor_pid+0x1fc>)
 800168e:	e9c1 2300 	strd	r2, r3, [r1]
	motor_position_error_sign_prev = motor_position_error_sign;
	if(motor_position_error > 0){ motor_position_error_sign = 1; }
	if(motor_position_error < 0){ motor_position_error_sign = -1; }
*/

	motor_speed_error = motor_speed_cmd - motor_speed;
 8001692:	4b73      	ldr	r3, [pc, #460]	@ (8001860 <motor_pid+0x210>)
 8001694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001698:	4b6c      	ldr	r3, [pc, #432]	@ (800184c <motor_pid+0x1fc>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f7fe fd59 	bl	8000154 <__aeabi_dsub>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	496f      	ldr	r1, [pc, #444]	@ (8001864 <motor_pid+0x214>)
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
	motor_speed_term_P = motor_speed_error  * motor_speed_gain_P;
 80016ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001868 <motor_pid+0x218>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe feaf 	bl	8000414 <__aeabi_f2d>
 80016b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001864 <motor_pid+0x214>)
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f7fe ff02 	bl	80004c4 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4969      	ldr	r1, [pc, #420]	@ (800186c <motor_pid+0x21c>)
 80016c6:	e9c1 2300 	strd	r2, r3, [r1]

	motor_accel_cmd = ((double)motor_speed_cmd - (double)motor_speed_cmd_prev) * 1000 / (double)dt;
 80016ca:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <motor_pid+0x210>)
 80016cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016d0:	4b67      	ldr	r3, [pc, #412]	@ (8001870 <motor_pid+0x220>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7fe fd3d 	bl	8000154 <__aeabi_dsub>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b63      	ldr	r3, [pc, #396]	@ (8001874 <motor_pid+0x224>)
 80016e8:	f7fe feec 	bl	80004c4 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4614      	mov	r4, r2
 80016f2:	461d      	mov	r5, r3
 80016f4:	4b60      	ldr	r3, [pc, #384]	@ (8001878 <motor_pid+0x228>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fe69 	bl	80003d0 <__aeabi_ui2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7ff f807 	bl	8000718 <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	495b      	ldr	r1, [pc, #364]	@ (800187c <motor_pid+0x22c>)
 8001710:	e9c1 2300 	strd	r2, r3, [r1]
	motor_speed_cmd_prev = motor_speed_cmd;
 8001714:	4b52      	ldr	r3, [pc, #328]	@ (8001860 <motor_pid+0x210>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	4955      	ldr	r1, [pc, #340]	@ (8001870 <motor_pid+0x220>)
 800171c:	e9c1 2300 	strd	r2, r3, [r1]
	motor_accel_error = motor_accel_cmd;
 8001720:	4b56      	ldr	r3, [pc, #344]	@ (800187c <motor_pid+0x22c>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	4956      	ldr	r1, [pc, #344]	@ (8001880 <motor_pid+0x230>)
 8001728:	e9c1 2300 	strd	r2, r3, [r1]
	motor_speed_term_A = motor_accel_error * motor_speed_gain_A;
 800172c:	4b55      	ldr	r3, [pc, #340]	@ (8001884 <motor_pid+0x234>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe fe6f 	bl	8000414 <__aeabi_f2d>
 8001736:	4b52      	ldr	r3, [pc, #328]	@ (8001880 <motor_pid+0x230>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe fec2 	bl	80004c4 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4950      	ldr	r1, [pc, #320]	@ (8001888 <motor_pid+0x238>)
 8001746:	e9c1 2300 	strd	r2, r3, [r1]
	//if(motor_speed_term_A < 0){ motor_speed_term_A = 0; }

	motor_speed_term_I += motor_speed_error * motor_speed_gain_I * (float)dt + motor_speed_term_A;
 800174a:	4b50      	ldr	r3, [pc, #320]	@ (800188c <motor_pid+0x23c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe60 	bl	8000414 <__aeabi_f2d>
 8001754:	4b43      	ldr	r3, [pc, #268]	@ (8001864 <motor_pid+0x214>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7fe feb3 	bl	80004c4 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4614      	mov	r4, r2
 8001764:	461d      	mov	r5, r3
 8001766:	4b44      	ldr	r3, [pc, #272]	@ (8001878 <motor_pid+0x228>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fa42 	bl	8000bf4 <__aeabi_ui2f>
 8001770:	4603      	mov	r3, r0
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe4e 	bl	8000414 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7fe fea0 	bl	80004c4 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	4b3e      	ldr	r3, [pc, #248]	@ (8001888 <motor_pid+0x238>)
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	f7fe fce1 	bl	8000158 <__adddf3>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	4b3c      	ldr	r3, [pc, #240]	@ (8001890 <motor_pid+0x240>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7fe fcd8 	bl	8000158 <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4938      	ldr	r1, [pc, #224]	@ (8001890 <motor_pid+0x240>)
 80017ae:	e9c1 2300 	strd	r2, r3, [r1]
	//if(motor_position_error_sign != motor_position_error_sign_prev){ motor_speed_term_I = -motor_speed_term_I; }  // I term scalaization
	if(motor_speed_term_I > motor_speed_term_I_max){ motor_speed_term_I = motor_speed_term_I_max; }
 80017b2:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <motor_pid+0x240>)
 80017b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b8:	4b36      	ldr	r3, [pc, #216]	@ (8001894 <motor_pid+0x244>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7ff f911 	bl	80009e4 <__aeabi_dcmpgt>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <motor_pid+0x184>
 80017c8:	4b32      	ldr	r3, [pc, #200]	@ (8001894 <motor_pid+0x244>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	4930      	ldr	r1, [pc, #192]	@ (8001890 <motor_pid+0x240>)
 80017d0:	e9c1 2300 	strd	r2, r3, [r1]
	if(motor_speed_term_I < -motor_speed_term_I_max){ motor_speed_term_I = -motor_speed_term_I_max; }
 80017d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <motor_pid+0x244>)
 80017d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017da:	60ba      	str	r2, [r7, #8]
 80017dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <motor_pid+0x240>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017ec:	f7ff f8fa 	bl	80009e4 <__aeabi_dcmpgt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d008      	beq.n	8001808 <motor_pid+0x1b8>
 80017f6:	4b27      	ldr	r3, [pc, #156]	@ (8001894 <motor_pid+0x244>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	4692      	mov	sl, r2
 80017fe:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <motor_pid+0x240>)
 8001804:	e9c3 ab00 	strd	sl, fp, [r3]

	motor_speed_control_out = motor_speed_term_P + motor_speed_term_I;
 8001808:	4b18      	ldr	r3, [pc, #96]	@ (800186c <motor_pid+0x21c>)
 800180a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <motor_pid+0x240>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fca0 	bl	8000158 <__adddf3>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	491e      	ldr	r1, [pc, #120]	@ (8001898 <motor_pid+0x248>)
 800181e:	e9c1 2300 	strd	r2, r3, [r1]
	if (motor_speed_control_out >= 0.0){ motor_speed_control_dir = 1; }
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <motor_pid+0x248>)
 8001824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f7ff f8ce 	bl	80009d0 <__aeabi_dcmpge>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d032      	beq.n	80018a0 <motor_pid+0x250>
 800183a:	4b18      	ldr	r3, [pc, #96]	@ (800189c <motor_pid+0x24c>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
 8001840:	e031      	b.n	80018a6 <motor_pid+0x256>
 8001842:	bf00      	nop
 8001844:	2000086c 	.word	0x2000086c
 8001848:	2000086e 	.word	0x2000086e
 800184c:	20000870 	.word	0x20000870
 8001850:	20000878 	.word	0x20000878
 8001854:	20000840 	.word	0x20000840
 8001858:	20000828 	.word	0x20000828
 800185c:	200005b8 	.word	0x200005b8
 8001860:	200008b0 	.word	0x200008b0
 8001864:	200008d0 	.word	0x200008d0
 8001868:	200005c8 	.word	0x200005c8
 800186c:	200008d8 	.word	0x200008d8
 8001870:	200008b8 	.word	0x200008b8
 8001874:	408f4000 	.word	0x408f4000
 8001878:	20000804 	.word	0x20000804
 800187c:	200008c0 	.word	0x200008c0
 8001880:	200008c8 	.word	0x200008c8
 8001884:	20000868 	.word	0x20000868
 8001888:	200008e8 	.word	0x200008e8
 800188c:	200005cc 	.word	0x200005cc
 8001890:	200008e0 	.word	0x200008e0
 8001894:	200005d8 	.word	0x200005d8
 8001898:	200008f0 	.word	0x200008f0
 800189c:	200005e0 	.word	0x200005e0
	else { motor_speed_control_dir = -1; }
 80018a0:	4b70      	ldr	r3, [pc, #448]	@ (8001a64 <motor_pid+0x414>)
 80018a2:	22ff      	movs	r2, #255	@ 0xff
 80018a4:	701a      	strb	r2, [r3, #0]
	motor_current_cmd = abs((int16_t)motor_speed_control_out);
 80018a6:	4b70      	ldr	r3, [pc, #448]	@ (8001a68 <motor_pid+0x418>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f8a2 	bl	80009f8 <__aeabi_d2iz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bfb8      	it	lt
 80018bc:	425b      	neglt	r3, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fd95 	bl	80003f0 <__aeabi_i2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4968      	ldr	r1, [pc, #416]	@ (8001a6c <motor_pid+0x41c>)
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]

	motor_current = current_value_lpf;
 80018d0:	4b67      	ldr	r3, [pc, #412]	@ (8001a70 <motor_pid+0x420>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	4967      	ldr	r1, [pc, #412]	@ (8001a74 <motor_pid+0x424>)
 80018d8:	e9c1 2300 	strd	r2, r3, [r1]
	motor_current_error = motor_current_cmd - motor_current;
 80018dc:	4b63      	ldr	r3, [pc, #396]	@ (8001a6c <motor_pid+0x41c>)
 80018de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018e2:	4b64      	ldr	r3, [pc, #400]	@ (8001a74 <motor_pid+0x424>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe fc34 	bl	8000154 <__aeabi_dsub>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4961      	ldr	r1, [pc, #388]	@ (8001a78 <motor_pid+0x428>)
 80018f2:	e9c1 2300 	strd	r2, r3, [r1]
	motor_current_term_P = motor_current_error * motor_current_gain_P;
 80018f6:	4b61      	ldr	r3, [pc, #388]	@ (8001a7c <motor_pid+0x42c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fd8a 	bl	8000414 <__aeabi_f2d>
 8001900:	4b5d      	ldr	r3, [pc, #372]	@ (8001a78 <motor_pid+0x428>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fddd 	bl	80004c4 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	495c      	ldr	r1, [pc, #368]	@ (8001a80 <motor_pid+0x430>)
 8001910:	e9c1 2300 	strd	r2, r3, [r1]
	motor_current_term_I += motor_current_error * motor_current_gain_I * (float)dt;
 8001914:	4b5b      	ldr	r3, [pc, #364]	@ (8001a84 <motor_pid+0x434>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fd7b 	bl	8000414 <__aeabi_f2d>
 800191e:	4b56      	ldr	r3, [pc, #344]	@ (8001a78 <motor_pid+0x428>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fdce 	bl	80004c4 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	4b55      	ldr	r3, [pc, #340]	@ (8001a88 <motor_pid+0x438>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff f95d 	bl	8000bf4 <__aeabi_ui2f>
 800193a:	4603      	mov	r3, r0
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fd69 	bl	8000414 <__aeabi_f2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f7fe fdbb 	bl	80004c4 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	4b4d      	ldr	r3, [pc, #308]	@ (8001a8c <motor_pid+0x43c>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe fbfc 	bl	8000158 <__adddf3>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4949      	ldr	r1, [pc, #292]	@ (8001a8c <motor_pid+0x43c>)
 8001966:	e9c1 2300 	strd	r2, r3, [r1]
	if(motor_current_term_I > motor_current_term_I_max){ motor_current_term_I = motor_current_term_I_max; }
 800196a:	4b48      	ldr	r3, [pc, #288]	@ (8001a8c <motor_pid+0x43c>)
 800196c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001970:	4b47      	ldr	r3, [pc, #284]	@ (8001a90 <motor_pid+0x440>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7ff f835 	bl	80009e4 <__aeabi_dcmpgt>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <motor_pid+0x33c>
 8001980:	4b43      	ldr	r3, [pc, #268]	@ (8001a90 <motor_pid+0x440>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	4941      	ldr	r1, [pc, #260]	@ (8001a8c <motor_pid+0x43c>)
 8001988:	e9c1 2300 	strd	r2, r3, [r1]
	if(motor_current_term_I < -motor_current_term_I_max){ motor_current_term_I = -motor_current_term_I_max; }
 800198c:	4b40      	ldr	r3, [pc, #256]	@ (8001a90 <motor_pid+0x440>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	603a      	str	r2, [r7, #0]
 8001994:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a8c <motor_pid+0x43c>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019a4:	f7ff f81e 	bl	80009e4 <__aeabi_dcmpgt>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d008      	beq.n	80019c0 <motor_pid+0x370>
 80019ae:	4b38      	ldr	r3, [pc, #224]	@ (8001a90 <motor_pid+0x440>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	4690      	mov	r8, r2
 80019b6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80019ba:	4b34      	ldr	r3, [pc, #208]	@ (8001a8c <motor_pid+0x43c>)
 80019bc:	e9c3 8900 	strd	r8, r9, [r3]
	motor_current_control_out = motor_current_term_P + motor_current_term_I;
 80019c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <motor_pid+0x430>)
 80019c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c6:	4b31      	ldr	r3, [pc, #196]	@ (8001a8c <motor_pid+0x43c>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fbc4 	bl	8000158 <__adddf3>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	492f      	ldr	r1, [pc, #188]	@ (8001a94 <motor_pid+0x444>)
 80019d6:	e9c1 2300 	strd	r2, r3, [r1]
	if(motor_current_control_out < 0){ motor_current_control_out = 0; }
 80019da:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <motor_pid+0x444>)
 80019dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	f7fe ffde 	bl	80009a8 <__aeabi_dcmplt>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <motor_pid+0x3b0>
 80019f2:	4928      	ldr	r1, [pc, #160]	@ (8001a94 <motor_pid+0x444>)
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c1 2300 	strd	r2, r3, [r1]

	motor_speed_plot = (uint16_t)motor_speed;
 8001a00:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <motor_pid+0x448>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff f81d 	bl	8000a48 <__aeabi_d2uiz>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	4b22      	ldr	r3, [pc, #136]	@ (8001a9c <motor_pid+0x44c>)
 8001a14:	801a      	strh	r2, [r3, #0]
	motor_speed_cmd_plot = (uint16_t)motor_speed_cmd;
 8001a16:	4b22      	ldr	r3, [pc, #136]	@ (8001aa0 <motor_pid+0x450>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f812 	bl	8000a48 <__aeabi_d2uiz>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <motor_pid+0x454>)
 8001a2a:	801a      	strh	r2, [r3, #0]
	motor_current_plot = (uint16_t)motor_current;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <motor_pid+0x424>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7ff f807 	bl	8000a48 <__aeabi_d2uiz>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <motor_pid+0x458>)
 8001a40:	801a      	strh	r2, [r3, #0]
	motor_current_cmd_plot = (uint16_t)motor_current_cmd;
 8001a42:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <motor_pid+0x41c>)
 8001a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7fe fffc 	bl	8000a48 <__aeabi_d2uiz>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <motor_pid+0x45c>)
 8001a56:	801a      	strh	r2, [r3, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a62:	bf00      	nop
 8001a64:	200005e0 	.word	0x200005e0
 8001a68:	200008f0 	.word	0x200008f0
 8001a6c:	20000888 	.word	0x20000888
 8001a70:	20000850 	.word	0x20000850
 8001a74:	20000880 	.word	0x20000880
 8001a78:	20000890 	.word	0x20000890
 8001a7c:	200005c0 	.word	0x200005c0
 8001a80:	20000898 	.word	0x20000898
 8001a84:	200005c4 	.word	0x200005c4
 8001a88:	20000804 	.word	0x20000804
 8001a8c:	200008a0 	.word	0x200008a0
 8001a90:	200005d0 	.word	0x200005d0
 8001a94:	200008a8 	.word	0x200008a8
 8001a98:	20000870 	.word	0x20000870
 8001a9c:	200008f8 	.word	0x200008f8
 8001aa0:	200008b0 	.word	0x200008b0
 8001aa4:	200008fa 	.word	0x200008fa
 8001aa8:	200008fc 	.word	0x200008fc
 8001aac:	200008fe 	.word	0x200008fe

08001ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b09b      	sub	sp, #108	@ 0x6c
 8001ab4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ab6:	f000 fe07 	bl	80026c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aba:	f000 f949 	bl	8001d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001abe:	f000 fb63 	bl	8002188 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ac2:	f000 f9a1 	bl	8001e08 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ac6:	f000 f9dd 	bl	8001e84 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001aca:	f000 fae5 	bl	8002098 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001ace:	f000 fb31 	bl	8002134 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001ad2:	f000 fa55 	bl	8001f80 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001ad6:	f000 fa03 	bl	8001ee0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001ada:	487e      	ldr	r0, [pc, #504]	@ (8001cd4 <main+0x224>)
 8001adc:	f004 f9f8 	bl	8005ed0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001ae0:	487d      	ldr	r0, [pc, #500]	@ (8001cd8 <main+0x228>)
 8001ae2:	f004 fa3f 	bl	8005f64 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	487c      	ldr	r0, [pc, #496]	@ (8001cdc <main+0x22c>)
 8001aea:	f004 fae5 	bl	80060b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001aee:	2108      	movs	r1, #8
 8001af0:	487a      	ldr	r0, [pc, #488]	@ (8001cdc <main+0x22c>)
 8001af2:	f004 fae1 	bl	80060b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001af6:	210c      	movs	r1, #12
 8001af8:	4878      	ldr	r0, [pc, #480]	@ (8001cdc <main+0x22c>)
 8001afa:	f004 fadd 	bl	80060b8 <HAL_TIM_PWM_Start>


  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001afe:	2012      	movs	r0, #18
 8001b00:	f001 fbe5 	bl	80032ce <HAL_NVIC_EnableIRQ>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001b04:	4876      	ldr	r0, [pc, #472]	@ (8001ce0 <main+0x230>)
 8001b06:	f001 fa37 	bl	8002f78 <HAL_ADCEx_Calibration_Start>
  //HAL_ADC_Start_IT(&hadc1);

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b10:	4874      	ldr	r0, [pc, #464]	@ (8001ce4 <main+0x234>)
 8001b12:	f001 fe3b 	bl	800378c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dt_update();
 8001b16:	f7ff fb13 	bl	8001140 <dt_update>
	  motor_pid();
 8001b1a:	f7ff fd99 	bl	8001650 <motor_pid>
	  torque((int16_t)motor_current_control_out * motor_speed_control_dir);
 8001b1e:	4b72      	ldr	r3, [pc, #456]	@ (8001ce8 <main+0x238>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7fe ff66 	bl	80009f8 <__aeabi_d2iz>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4a6e      	ldr	r2, [pc, #440]	@ (8001cec <main+0x23c>)
 8001b34:	f992 2000 	ldrsb.w	r2, [r2]
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fcfe 	bl	8001544 <torque>

	  if (i2c1_go == 1){ i2c1_go = 0; encoder_read(); }
 8001b48:	4b69      	ldr	r3, [pc, #420]	@ (8001cf0 <main+0x240>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d104      	bne.n	8001b5c <main+0xac>
 8001b52:	4b67      	ldr	r3, [pc, #412]	@ (8001cf0 <main+0x240>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	f7ff fb32 	bl	80011c0 <encoder_read>
	  if (i2c1_err == 1){ i2c1_err = 0; encoder_read(); }
 8001b5c:	4b65      	ldr	r3, [pc, #404]	@ (8001cf4 <main+0x244>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d104      	bne.n	8001b6e <main+0xbe>
 8001b64:	4b63      	ldr	r3, [pc, #396]	@ (8001cf4 <main+0x244>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
 8001b6a:	f7ff fb29 	bl	80011c0 <encoder_read>
	  if (adc1_go == 1){
 8001b6e:	4b62      	ldr	r3, [pc, #392]	@ (8001cf8 <main+0x248>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10b      	bne.n	8001b90 <main+0xe0>
		  adc1_go = 0;
 8001b78:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf8 <main+0x248>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
		  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK){ adc1_err = 1; }
 8001b7e:	4858      	ldr	r0, [pc, #352]	@ (8001ce0 <main+0x230>)
 8001b80:	f000 fedc 	bl	800293c <HAL_ADC_Start_IT>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <main+0xe0>
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cfc <main+0x24c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
	  }


	  current_value_lpf = lpf_current((double)(current_value - current_offset), lpf_current_alpha);
 8001b90:	4b5b      	ldr	r3, [pc, #364]	@ (8001d00 <main+0x250>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	4b5a      	ldr	r3, [pc, #360]	@ (8001d04 <main+0x254>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fc26 	bl	80003f0 <__aeabi_i2d>
 8001ba4:	4b58      	ldr	r3, [pc, #352]	@ (8001d08 <main+0x258>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7ff fa51 	bl	8001050 <lpf_current>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4956      	ldr	r1, [pc, #344]	@ (8001d0c <main+0x25c>)
 8001bb4:	e9c1 2300 	strd	r2, r3, [r1]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  T_cmd += dt;
 8001bb8:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <main+0x260>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b55      	ldr	r3, [pc, #340]	@ (8001d14 <main+0x264>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a53      	ldr	r2, [pc, #332]	@ (8001d14 <main+0x264>)
 8001bc6:	6013      	str	r3, [r2, #0]
	  if(T_cmd >= Period_cmd){
 8001bc8:	4b52      	ldr	r3, [pc, #328]	@ (8001d14 <main+0x264>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b52      	ldr	r3, [pc, #328]	@ (8001d18 <main+0x268>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d332      	bcc.n	8001c3a <main+0x18a>
		  T_cmd -= Period_cmd;
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8001d14 <main+0x264>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8001d18 <main+0x268>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	4a4d      	ldr	r2, [pc, #308]	@ (8001d14 <main+0x264>)
 8001be0:	6013      	str	r3, [r2, #0]
		  if(motor_speed_cmd == 1){ motor_speed_cmd = 0; }
 8001be2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d1c <main+0x26c>)
 8001be4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <main+0x270>)
 8001bee:	f7fe fed1 	bl	8000994 <__aeabi_dcmpeq>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d007      	beq.n	8001c08 <main+0x158>
 8001bf8:	4948      	ldr	r1, [pc, #288]	@ (8001d1c <main+0x26c>)
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	e9c1 2300 	strd	r2, r3, [r1]
 8001c06:	e018      	b.n	8001c3a <main+0x18a>
		  else if(motor_speed_cmd == 0){ motor_speed_cmd = 1; }
 8001c08:	4b44      	ldr	r3, [pc, #272]	@ (8001d1c <main+0x26c>)
 8001c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	f7fe febd 	bl	8000994 <__aeabi_dcmpeq>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d006      	beq.n	8001c2e <main+0x17e>
 8001c20:	493e      	ldr	r1, [pc, #248]	@ (8001d1c <main+0x26c>)
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b3e      	ldr	r3, [pc, #248]	@ (8001d20 <main+0x270>)
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
 8001c2c:	e005      	b.n	8001c3a <main+0x18a>
		  else{ motor_speed_cmd = 1; }
 8001c2e:	493b      	ldr	r1, [pc, #236]	@ (8001d1c <main+0x26c>)
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b3a      	ldr	r3, [pc, #232]	@ (8001d20 <main+0x270>)
 8001c36:	e9c1 2300 	strd	r2, r3, [r1]
	  }

	  T_uart += dt;
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d24 <main+0x274>)
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	4b34      	ldr	r3, [pc, #208]	@ (8001d10 <main+0x260>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	4b37      	ldr	r3, [pc, #220]	@ (8001d24 <main+0x274>)
 8001c48:	801a      	strh	r2, [r3, #0]
	  if(T_uart >= Period_uart){
 8001c4a:	4b36      	ldr	r3, [pc, #216]	@ (8001d24 <main+0x274>)
 8001c4c:	881a      	ldrh	r2, [r3, #0]
 8001c4e:	4b36      	ldr	r3, [pc, #216]	@ (8001d28 <main+0x278>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	f4ff af5f 	bcc.w	8001b16 <main+0x66>
		  T_uart -= Period_uart;
 8001c58:	4b32      	ldr	r3, [pc, #200]	@ (8001d24 <main+0x274>)
 8001c5a:	881a      	ldrh	r2, [r3, #0]
 8001c5c:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <main+0x278>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	4b2f      	ldr	r3, [pc, #188]	@ (8001d24 <main+0x274>)
 8001c66:	801a      	strh	r2, [r3, #0]
		  if(uart1_go == 1){
 8001c68:	4b30      	ldr	r3, [pc, #192]	@ (8001d2c <main+0x27c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	f47f af51 	bne.w	8001b16 <main+0x66>
			  uart1_go = 0;
 8001c74:	4b2d      	ldr	r3, [pc, #180]	@ (8001d2c <main+0x27c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
			  uint8_t buf[50] = { '\0', };
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	222e      	movs	r2, #46	@ 0x2e
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 fdf5 	bl	8007874 <memset>
			  uint8_t str_1[5]; uint8_t str_2[5]; uint8_t str_3[5]; uint8_t str_4[5];
			  uint8_t str_min[4] = "-100"; uint8_t str_max[4] = "2000"; uint8_t str_eof[2] = "\r\n";
 8001c8a:	4b29      	ldr	r3, [pc, #164]	@ (8001d30 <main+0x280>)
 8001c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8e:	4b29      	ldr	r3, [pc, #164]	@ (8001d34 <main+0x284>)
 8001c90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c92:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001c96:	86bb      	strh	r3, [r7, #52]	@ 0x34

			  sprintf(buf, "%d,%d,%d,%d\r\n", motor_speed_plot*50, motor_speed_cmd_plot*50,
 8001c98:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <main+0x288>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2332      	movs	r3, #50	@ 0x32
 8001ca0:	fb03 f202 	mul.w	r2, r3, r2
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <main+0x28c>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	2332      	movs	r3, #50	@ 0x32
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	4923      	ldr	r1, [pc, #140]	@ (8001d40 <main+0x290>)
 8001cb2:	8809      	ldrh	r1, [r1, #0]
 8001cb4:	460c      	mov	r4, r1
 8001cb6:	4923      	ldr	r1, [pc, #140]	@ (8001d44 <main+0x294>)
 8001cb8:	8809      	ldrh	r1, [r1, #0]
 8001cba:	4638      	mov	r0, r7
 8001cbc:	9101      	str	r1, [sp, #4]
 8001cbe:	9400      	str	r4, [sp, #0]
 8001cc0:	4921      	ldr	r1, [pc, #132]	@ (8001d48 <main+0x298>)
 8001cc2:	f005 fdb7 	bl	8007834 <siprintf>
					  motor_current_plot, motor_current_cmd_plot);
					 // ,motor_position, motor_position_cmd);
			  HAL_UART_Transmit_IT(&huart1, buf, 50);
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2232      	movs	r2, #50	@ 0x32
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481f      	ldr	r0, [pc, #124]	@ (8001d4c <main+0x29c>)
 8001cce:	f005 f8a3 	bl	8006e18 <HAL_UART_Transmit_IT>
	  dt_update();
 8001cd2:	e720      	b.n	8001b16 <main+0x66>
 8001cd4:	200006e0 	.word	0x200006e0
 8001cd8:	20000770 	.word	0x20000770
 8001cdc:	20000728 	.word	0x20000728
 8001ce0:	2000065c 	.word	0x2000065c
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	200008a8 	.word	0x200008a8
 8001cec:	200005e0 	.word	0x200005e0
 8001cf0:	200005a8 	.word	0x200005a8
 8001cf4:	20000845 	.word	0x20000845
 8001cf8:	200005aa 	.word	0x200005aa
 8001cfc:	20000846 	.word	0x20000846
 8001d00:	20000848 	.word	0x20000848
 8001d04:	200005ac 	.word	0x200005ac
 8001d08:	200005b0 	.word	0x200005b0
 8001d0c:	20000850 	.word	0x20000850
 8001d10:	20000804 	.word	0x20000804
 8001d14:	20000808 	.word	0x20000808
 8001d18:	200005a4 	.word	0x200005a4
 8001d1c:	200008b0 	.word	0x200008b0
 8001d20:	3ff00000 	.word	0x3ff00000
 8001d24:	20000806 	.word	0x20000806
 8001d28:	200005a0 	.word	0x200005a0
 8001d2c:	200005a9 	.word	0x200005a9
 8001d30:	3030312d 	.word	0x3030312d
 8001d34:	30303032 	.word	0x30303032
 8001d38:	200008f8 	.word	0x200008f8
 8001d3c:	200008fa 	.word	0x200008fa
 8001d40:	200008fc 	.word	0x200008fc
 8001d44:	200008fe 	.word	0x200008fe
 8001d48:	080081ac 	.word	0x080081ac
 8001d4c:	200007b8 	.word	0x200007b8

08001d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b094      	sub	sp, #80	@ 0x50
 8001d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d5a:	2228      	movs	r2, #40	@ 0x28
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f005 fd88 	bl	8007874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d80:	2301      	movs	r3, #1
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d92:	2302      	movs	r3, #2
 8001d94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d9c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fac6 	bl	8005338 <HAL_RCC_OscConfig>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001db2:	f000 fa41 	bl	8002238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db6:	230f      	movs	r3, #15
 8001db8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fd32 	bl	800583c <HAL_RCC_ClockConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001dde:	f000 fa2b 	bl	8002238 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001de2:	2302      	movs	r3, #2
 8001de4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 feb2 	bl	8005b58 <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001dfa:	f000 fa1d 	bl	8002238 <Error_Handler>
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3750      	adds	r7, #80	@ 0x50
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e18:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e1a:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <MX_ADC1_Init+0x78>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e24:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e32:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001e36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e38:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e44:	480d      	ldr	r0, [pc, #52]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e46:	f000 fca1 	bl	800278c <HAL_ADC_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001e50:	f000 f9f2 	bl	8002238 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <MX_ADC1_Init+0x74>)
 8001e66:	f000 fef3 	bl	8002c50 <HAL_ADC_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001e70:	f000 f9e2 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2000065c 	.word	0x2000065c
 8001e80:	40012400 	.word	0x40012400

08001e84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001e8a:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <MX_I2C1_Init+0x54>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001e90:	4a12      	ldr	r2, [pc, #72]	@ (8001edc <MX_I2C1_Init+0x58>)
 8001e92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001ea2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ea6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eb4:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ec0:	4804      	ldr	r0, [pc, #16]	@ (8001ed4 <MX_I2C1_Init+0x50>)
 8001ec2:	f001 fc7b 	bl	80037bc <HAL_I2C_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ecc:	f000 f9b4 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	2000068c 	.word	0x2000068c
 8001ed8:	40005400 	.word	0x40005400
 8001edc:	000186a0 	.word	0x000186a0

08001ee0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef4:	463b      	mov	r3, r7
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001efe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <MX_TIM1_Init+0x9c>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001f02:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f04:	2247      	movs	r2, #71	@ 0x47
 8001f06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f16:	4b18      	ldr	r3, [pc, #96]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f1c:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f28:	4813      	ldr	r0, [pc, #76]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f2a:	f003 ff81 	bl	8005e30 <HAL_TIM_Base_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f34:	f000 f980 	bl	8002238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	4619      	mov	r1, r3
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f46:	f004 fb0b 	bl	8006560 <HAL_TIM_ConfigClockSource>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f50:	f000 f972 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <MX_TIM1_Init+0x98>)
 8001f62:	f004 fe99 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f6c:	f000 f964 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	200006e0 	.word	0x200006e0
 8001f7c:	40012c00 	.word	0x40012c00

08001f80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	@ 0x38
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]
 8001fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fb0:	4b38      	ldr	r3, [pc, #224]	@ (8002094 <MX_TIM2_Init+0x114>)
 8001fb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fb8:	4b36      	ldr	r3, [pc, #216]	@ (8002094 <MX_TIM2_Init+0x114>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbe:	4b35      	ldr	r3, [pc, #212]	@ (8002094 <MX_TIM2_Init+0x114>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599;
 8001fc4:	4b33      	ldr	r3, [pc, #204]	@ (8002094 <MX_TIM2_Init+0x114>)
 8001fc6:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8001fca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fcc:	4b31      	ldr	r3, [pc, #196]	@ (8002094 <MX_TIM2_Init+0x114>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd2:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <MX_TIM2_Init+0x114>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fd8:	482e      	ldr	r0, [pc, #184]	@ (8002094 <MX_TIM2_Init+0x114>)
 8001fda:	f003 ff29 	bl	8005e30 <HAL_TIM_Base_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fe4:	f000 f928 	bl	8002238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4827      	ldr	r0, [pc, #156]	@ (8002094 <MX_TIM2_Init+0x114>)
 8001ff6:	f004 fab3 	bl	8006560 <HAL_TIM_ConfigClockSource>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002000:	f000 f91a 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002004:	4823      	ldr	r0, [pc, #140]	@ (8002094 <MX_TIM2_Init+0x114>)
 8002006:	f003 ffff 	bl	8006008 <HAL_TIM_PWM_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002010:	f000 f912 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800201c:	f107 0320 	add.w	r3, r7, #32
 8002020:	4619      	mov	r1, r3
 8002022:	481c      	ldr	r0, [pc, #112]	@ (8002094 <MX_TIM2_Init+0x114>)
 8002024:	f004 fe38 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800202e:	f000 f903 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002032:	2360      	movs	r3, #96	@ 0x60
 8002034:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2204      	movs	r2, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4812      	ldr	r0, [pc, #72]	@ (8002094 <MX_TIM2_Init+0x114>)
 800204a:	f004 f9c7 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002054:	f000 f8f0 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2208      	movs	r2, #8
 800205c:	4619      	mov	r1, r3
 800205e:	480d      	ldr	r0, [pc, #52]	@ (8002094 <MX_TIM2_Init+0x114>)
 8002060:	f004 f9bc 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800206a:	f000 f8e5 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	220c      	movs	r2, #12
 8002072:	4619      	mov	r1, r3
 8002074:	4807      	ldr	r0, [pc, #28]	@ (8002094 <MX_TIM2_Init+0x114>)
 8002076:	f004 f9b1 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002080:	f000 f8da 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002084:	4803      	ldr	r0, [pc, #12]	@ (8002094 <MX_TIM2_Init+0x114>)
 8002086:	f000 f9e5 	bl	8002454 <HAL_TIM_MspPostInit>

}
 800208a:	bf00      	nop
 800208c:	3738      	adds	r7, #56	@ 0x38
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000728 	.word	0x20000728

08002098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209e:	f107 0308 	add.w	r3, r7, #8
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ac:	463b      	mov	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <MX_TIM3_Init+0x94>)
 80020b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002130 <MX_TIM3_Init+0x98>)
 80020b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	@ (800212c <MX_TIM3_Init+0x94>)
 80020bc:	2247      	movs	r2, #71	@ 0x47
 80020be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <MX_TIM3_Init+0x94>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80020c6:	4b19      	ldr	r3, [pc, #100]	@ (800212c <MX_TIM3_Init+0x94>)
 80020c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <MX_TIM3_Init+0x94>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d4:	4b15      	ldr	r3, [pc, #84]	@ (800212c <MX_TIM3_Init+0x94>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020da:	4814      	ldr	r0, [pc, #80]	@ (800212c <MX_TIM3_Init+0x94>)
 80020dc:	f003 fea8 	bl	8005e30 <HAL_TIM_Base_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80020e6:	f000 f8a7 	bl	8002238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	4619      	mov	r1, r3
 80020f6:	480d      	ldr	r0, [pc, #52]	@ (800212c <MX_TIM3_Init+0x94>)
 80020f8:	f004 fa32 	bl	8006560 <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002102:	f000 f899 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800210e:	463b      	mov	r3, r7
 8002110:	4619      	mov	r1, r3
 8002112:	4806      	ldr	r0, [pc, #24]	@ (800212c <MX_TIM3_Init+0x94>)
 8002114:	f004 fdc0 	bl	8006c98 <HAL_TIMEx_MasterConfigSynchronization>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800211e:	f000 f88b 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000770 	.word	0x20000770
 8002130:	40000400 	.word	0x40000400

08002134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002138:	4b10      	ldr	r3, [pc, #64]	@ (800217c <MX_USART1_UART_Init+0x48>)
 800213a:	4a11      	ldr	r2, [pc, #68]	@ (8002180 <MX_USART1_UART_Init+0x4c>)
 800213c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 800213e:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <MX_USART1_UART_Init+0x48>)
 8002140:	4a10      	ldr	r2, [pc, #64]	@ (8002184 <MX_USART1_UART_Init+0x50>)
 8002142:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002144:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <MX_USART1_UART_Init+0x48>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800214a:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_USART1_UART_Init+0x48>)
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002150:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <MX_USART1_UART_Init+0x48>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_USART1_UART_Init+0x48>)
 8002158:	220c      	movs	r2, #12
 800215a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215c:	4b07      	ldr	r3, [pc, #28]	@ (800217c <MX_USART1_UART_Init+0x48>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002162:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_USART1_UART_Init+0x48>)
 8002164:	2200      	movs	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002168:	4804      	ldr	r0, [pc, #16]	@ (800217c <MX_USART1_UART_Init+0x48>)
 800216a:	f004 fe05 	bl	8006d78 <HAL_UART_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8002174:	f000 f860 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200007b8 	.word	0x200007b8
 8002180:	40013800 	.word	0x40013800
 8002184:	000f4240 	.word	0x000f4240

08002188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	f107 0310 	add.w	r3, r7, #16
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <MX_GPIO_Init+0xa8>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a23      	ldr	r2, [pc, #140]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021ba:	f043 0320 	orr.w	r3, r3, #32
 80021be:	6193      	str	r3, [r2, #24]
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6193      	str	r3, [r2, #24]
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e4:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a11      	ldr	r2, [pc, #68]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021ea:	f043 0308 	orr.w	r3, r3, #8
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002230 <MX_GPIO_Init+0xa8>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	603b      	str	r3, [r7, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002202:	480c      	ldr	r0, [pc, #48]	@ (8002234 <MX_GPIO_Init+0xac>)
 8002204:	f001 fac2 	bl	800378c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002208:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800220c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002212:	2302      	movs	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2302      	movs	r3, #2
 8002218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 0310 	add.w	r3, r7, #16
 800221e:	4619      	mov	r1, r3
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <MX_GPIO_Init+0xac>)
 8002222:	f001 f92f 	bl	8003484 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002226:	bf00      	nop
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	40011000 	.word	0x40011000

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <Error_Handler+0x8>

08002244 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_MspInit+0x5c>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6193      	str	r3, [r2, #24]
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a0e      	ldr	r2, [pc, #56]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226c:	61d3      	str	r3, [r2, #28]
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_MspInit+0x5c>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800227a:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <HAL_MspInit+0x60>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <HAL_MspInit+0x60>)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000

080022a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a18      	ldr	r2, [pc, #96]	@ (8002324 <HAL_ADC_MspInit+0x7c>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d129      	bne.n	800231c <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022c8:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <HAL_ADC_MspInit+0x80>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a16      	ldr	r2, [pc, #88]	@ (8002328 <HAL_ADC_MspInit+0x80>)
 80022ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b14      	ldr	r3, [pc, #80]	@ (8002328 <HAL_ADC_MspInit+0x80>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e0:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_ADC_MspInit+0x80>)
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	4a10      	ldr	r2, [pc, #64]	@ (8002328 <HAL_ADC_MspInit+0x80>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_ADC_MspInit+0x80>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022fc:	2303      	movs	r3, #3
 80022fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4619      	mov	r1, r3
 8002306:	4809      	ldr	r0, [pc, #36]	@ (800232c <HAL_ADC_MspInit+0x84>)
 8002308:	f001 f8bc 	bl	8003484 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	2012      	movs	r0, #18
 8002312:	f000 ffc0 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002316:	2012      	movs	r0, #18
 8002318:	f000 ffd9 	bl	80032ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800231c:	bf00      	nop
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40012400 	.word	0x40012400
 8002328:	40021000 	.word	0x40021000
 800232c:	40010800 	.word	0x40010800

08002330 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a19      	ldr	r2, [pc, #100]	@ (80023b0 <HAL_I2C_MspInit+0x80>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d12b      	bne.n	80023a8 <HAL_I2C_MspInit+0x78>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	4b18      	ldr	r3, [pc, #96]	@ (80023b4 <HAL_I2C_MspInit+0x84>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <HAL_I2C_MspInit+0x84>)
 8002356:	f043 0308 	orr.w	r3, r3, #8
 800235a:	6193      	str	r3, [r2, #24]
 800235c:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_I2C_MspInit+0x84>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002368:	23c0      	movs	r3, #192	@ 0xc0
 800236a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800236c:	2312      	movs	r3, #18
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4619      	mov	r1, r3
 800237a:	480f      	ldr	r0, [pc, #60]	@ (80023b8 <HAL_I2C_MspInit+0x88>)
 800237c:	f001 f882 	bl	8003484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002380:	4b0c      	ldr	r3, [pc, #48]	@ (80023b4 <HAL_I2C_MspInit+0x84>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	4a0b      	ldr	r2, [pc, #44]	@ (80023b4 <HAL_I2C_MspInit+0x84>)
 8002386:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800238a:	61d3      	str	r3, [r2, #28]
 800238c:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_I2C_MspInit+0x84>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	201f      	movs	r0, #31
 800239e:	f000 ff7a 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023a2:	201f      	movs	r0, #31
 80023a4:	f000 ff93 	bl	80032ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40005400 	.word	0x40005400
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010c00 	.word	0x40010c00

080023bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002448 <HAL_TIM_Base_MspInit+0x8c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10c      	bne.n	80023e8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023ce:	4b1f      	ldr	r3, [pc, #124]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	4a1e      	ldr	r2, [pc, #120]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 80023d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023d8:	6193      	str	r3, [r2, #24]
 80023da:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80023e6:	e02a      	b.n	800243e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f0:	d10c      	bne.n	800240c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f2:	4b16      	ldr	r3, [pc, #88]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	61d3      	str	r3, [r2, #28]
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	693b      	ldr	r3, [r7, #16]
}
 800240a:	e018      	b.n	800243e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0f      	ldr	r2, [pc, #60]	@ (8002450 <HAL_TIM_Base_MspInit+0x94>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d113      	bne.n	800243e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002416:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a0c      	ldr	r2, [pc, #48]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	61d3      	str	r3, [r2, #28]
 8002422:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <HAL_TIM_Base_MspInit+0x90>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	201d      	movs	r0, #29
 8002434:	f000 ff2f 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002438:	201d      	movs	r0, #29
 800243a:	f000 ff48 	bl	80032ce <HAL_NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40021000 	.word	0x40021000
 8002450:	40000400 	.word	0x40000400

08002454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002472:	d117      	bne.n	80024a4 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_TIM_MspPostInit+0x58>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a0c      	ldr	r2, [pc, #48]	@ (80024ac <HAL_TIM_MspPostInit+0x58>)
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <HAL_TIM_MspPostInit+0x58>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800248c:	230e      	movs	r3, #14
 800248e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2302      	movs	r3, #2
 8002496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4619      	mov	r1, r3
 800249e:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <HAL_TIM_MspPostInit+0x5c>)
 80024a0:	f000 fff0 	bl	8003484 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40010800 	.word	0x40010800

080024b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a20      	ldr	r2, [pc, #128]	@ (8002550 <HAL_UART_MspInit+0x9c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d139      	bne.n	8002548 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024de:	6193      	str	r3, [r2, #24]
 80024e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ec:	4b19      	ldr	r3, [pc, #100]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024f2:	f043 0304 	orr.w	r3, r3, #4
 80024f6:	6193      	str	r3, [r2, #24]
 80024f8:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <HAL_UART_MspInit+0xa0>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002508:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800250e:	2303      	movs	r3, #3
 8002510:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	4619      	mov	r1, r3
 8002518:	480f      	ldr	r0, [pc, #60]	@ (8002558 <HAL_UART_MspInit+0xa4>)
 800251a:	f000 ffb3 	bl	8003484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800251e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002522:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4619      	mov	r1, r3
 8002532:	4809      	ldr	r0, [pc, #36]	@ (8002558 <HAL_UART_MspInit+0xa4>)
 8002534:	f000 ffa6 	bl	8003484 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	2025      	movs	r0, #37	@ 0x25
 800253e:	f000 feaa 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002542:	2025      	movs	r0, #37	@ 0x25
 8002544:	f000 fec3 	bl	80032ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40013800 	.word	0x40013800
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <NMI_Handler+0x4>

08002564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <HardFault_Handler+0x4>

0800256c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <MemManage_Handler+0x4>

08002574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <BusFault_Handler+0x4>

0800257c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <UsageFault_Handler+0x4>

08002584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ac:	f000 f8d2 	bl	8002754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025b8:	4802      	ldr	r0, [pc, #8]	@ (80025c4 <ADC1_2_IRQHandler+0x10>)
 80025ba:	f000 fa81 	bl	8002ac0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000065c 	.word	0x2000065c

080025c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025cc:	4802      	ldr	r0, [pc, #8]	@ (80025d8 <TIM3_IRQHandler+0x10>)
 80025ce:	f003 fe15 	bl	80061fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000770 	.word	0x20000770

080025dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <I2C1_EV_IRQHandler+0x10>)
 80025e2:	f001 fafb 	bl	8003bdc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000068c 	.word	0x2000068c

080025f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025f4:	4802      	ldr	r0, [pc, #8]	@ (8002600 <USART1_IRQHandler+0x10>)
 80025f6:	f004 fc45 	bl	8006e84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200007b8 	.word	0x200007b8

08002604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800260c:	4a14      	ldr	r2, [pc, #80]	@ (8002660 <_sbrk+0x5c>)
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <_sbrk+0x60>)
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002618:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002620:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <_sbrk+0x64>)
 8002622:	4a12      	ldr	r2, [pc, #72]	@ (800266c <_sbrk+0x68>)
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d207      	bcs.n	8002644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002634:	f005 f926 	bl	8007884 <__errno>
 8002638:	4603      	mov	r3, r0
 800263a:	220c      	movs	r2, #12
 800263c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263e:	f04f 33ff 	mov.w	r3, #4294967295
 8002642:	e009      	b.n	8002658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002644:	4b08      	ldr	r3, [pc, #32]	@ (8002668 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264a:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	4a05      	ldr	r2, [pc, #20]	@ (8002668 <_sbrk+0x64>)
 8002654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002656:	68fb      	ldr	r3, [r7, #12]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20005000 	.word	0x20005000
 8002664:	00000400 	.word	0x00000400
 8002668:	20000900 	.word	0x20000900
 800266c:	20000a50 	.word	0x20000a50

08002670 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 800267c:	f7ff fff8 	bl	8002670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002680:	480b      	ldr	r0, [pc, #44]	@ (80026b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002682:	490c      	ldr	r1, [pc, #48]	@ (80026b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002684:	4a0c      	ldr	r2, [pc, #48]	@ (80026b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a09      	ldr	r2, [pc, #36]	@ (80026bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002698:	4c09      	ldr	r4, [pc, #36]	@ (80026c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026a6:	f005 f8f3 	bl	8007890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026aa:	f7ff fa01 	bl	8001ab0 <main>
  bx lr
 80026ae:	4770      	bx	lr
  ldr r0, =_sdata
 80026b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b4:	20000640 	.word	0x20000640
  ldr r2, =_sidata
 80026b8:	08008238 	.word	0x08008238
  ldr r2, =_sbss
 80026bc:	20000640 	.word	0x20000640
  ldr r4, =_ebss
 80026c0:	20000a50 	.word	0x20000a50

080026c4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <CAN1_RX1_IRQHandler>
	...

080026c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_Init+0x28>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <HAL_Init+0x28>)
 80026d2:	f043 0310 	orr.w	r3, r3, #16
 80026d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d8:	2003      	movs	r0, #3
 80026da:	f000 fdd1 	bl	8003280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026de:	200f      	movs	r0, #15
 80026e0:	f000 f808 	bl	80026f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e4:	f7ff fdae 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026fc:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_InitTick+0x54>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_InitTick+0x58>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800270a:	fbb3 f3f1 	udiv	r3, r3, r1
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fde9 	bl	80032ea <HAL_SYSTICK_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e00e      	b.n	8002740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b0f      	cmp	r3, #15
 8002726:	d80a      	bhi.n	800273e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002728:	2200      	movs	r2, #0
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	f000 fdb1 	bl	8003296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002734:	4a06      	ldr	r2, [pc, #24]	@ (8002750 <HAL_InitTick+0x5c>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200005e4 	.word	0x200005e4
 800274c:	200005ec 	.word	0x200005ec
 8002750:	200005e8 	.word	0x200005e8

08002754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <HAL_IncTick+0x1c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <HAL_IncTick+0x20>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4413      	add	r3, r2
 8002764:	4a03      	ldr	r2, [pc, #12]	@ (8002774 <HAL_IncTick+0x20>)
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	200005ec 	.word	0x200005ec
 8002774:	20000904 	.word	0x20000904

08002778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return uwTick;
 800277c:	4b02      	ldr	r3, [pc, #8]	@ (8002788 <HAL_GetTick+0x10>)
 800277e:	681b      	ldr	r3, [r3, #0]
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	20000904 	.word	0x20000904

0800278c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0be      	b.n	800292c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fd6c 	bl	80022a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 fb8f 	bl	8002ef4 <ADC_ConversionStop_Disable>
 80027d6:	4603      	mov	r3, r0
 80027d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8099 	bne.w	800291a <HAL_ADC_Init+0x18e>
 80027e8:	7dfb      	ldrb	r3, [r7, #23]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 8095 	bne.w	800291a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027f8:	f023 0302 	bic.w	r3, r3, #2
 80027fc:	f043 0202 	orr.w	r2, r3, #2
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800280c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7b1b      	ldrb	r3, [r3, #12]
 8002812:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002814:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002824:	d003      	beq.n	800282e <HAL_ADC_Init+0xa2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <HAL_ADC_Init+0xa8>
 800282e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002832:	e000      	b.n	8002836 <HAL_ADC_Init+0xaa>
 8002834:	2300      	movs	r3, #0
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7d1b      	ldrb	r3, [r3, #20]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d119      	bne.n	8002878 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7b1b      	ldrb	r3, [r3, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	3b01      	subs	r3, #1
 8002852:	035a      	lsls	r2, r3, #13
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	e00b      	b.n	8002878 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	4b28      	ldr	r3, [pc, #160]	@ (8002934 <HAL_ADC_Init+0x1a8>)
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	430b      	orrs	r3, r1
 800289e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a8:	d003      	beq.n	80028b2 <HAL_ADC_Init+0x126>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d104      	bne.n	80028bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	051b      	lsls	r3, r3, #20
 80028ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_ADC_Init+0x1ac>)
 80028d8:	4013      	ands	r3, r2
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d10b      	bne.n	80028f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	f023 0303 	bic.w	r3, r3, #3
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028f6:	e018      	b.n	800292a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	f023 0312 	bic.w	r3, r3, #18
 8002900:	f043 0210 	orr.w	r2, r3, #16
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002918:	e007      	b.n	800292a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	ffe1f7fd 	.word	0xffe1f7fd
 8002938:	ff1f0efe 	.word	0xff1f0efe

0800293c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_ADC_Start_IT+0x1a>
 8002952:	2302      	movs	r3, #2
 8002954:	e0a0      	b.n	8002a98 <HAL_ADC_Start_IT+0x15c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa6e 	bl	8002e40 <ADC_Enable>
 8002964:	4603      	mov	r3, r0
 8002966:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 808f 	bne.w	8002a8e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a45      	ldr	r2, [pc, #276]	@ (8002aa0 <HAL_ADC_Start_IT+0x164>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d105      	bne.n	800299a <HAL_ADC_Start_IT+0x5e>
 800298e:	4b45      	ldr	r3, [pc, #276]	@ (8002aa4 <HAL_ADC_Start_IT+0x168>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d115      	bne.n	80029c6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d026      	beq.n	8002a02 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029c4:	e01d      	b.n	8002a02 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a33      	ldr	r2, [pc, #204]	@ (8002aa4 <HAL_ADC_Start_IT+0x168>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_Start_IT+0xaa>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa0 <HAL_ADC_Start_IT+0x164>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10d      	bne.n	8002a02 <HAL_ADC_Start_IT+0xc6>
 80029e6:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa4 <HAL_ADC_Start_IT+0x168>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d006      	beq.n	8002a1c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	f023 0206 	bic.w	r2, r3, #6
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a1a:	e002      	b.n	8002a22 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f06f 0202 	mvn.w	r2, #2
 8002a32:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0220 	orr.w	r2, r2, #32
 8002a42:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002a4e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002a52:	d113      	bne.n	8002a7c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a58:	4a11      	ldr	r2, [pc, #68]	@ (8002aa0 <HAL_ADC_Start_IT+0x164>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d105      	bne.n	8002a6a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002a5e:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_ADC_Start_IT+0x168>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d108      	bne.n	8002a7c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	e00c      	b.n	8002a96 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	e003      	b.n	8002a96 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40012800 	.word	0x40012800
 8002aa4:	40012400 	.word	0x40012400

08002aa8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d03e      	beq.n	8002b60 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d039      	beq.n	8002b60 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002b0e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002b12:	d11d      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d119      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0220 	bic.w	r2, r2, #32
 8002b2a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7fe fa5f 	bl	8001014 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f06f 0212 	mvn.w	r2, #18
 8002b5e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d04d      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d048      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002b96:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002b9a:	d012      	beq.n	8002bc2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d125      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002bb4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002bb8:	d11d      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d119      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bd0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa6c 	bl	80030d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 020c 	mvn.w	r2, #12
 8002c04:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d012      	beq.n	8002c36 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f809 	bl	8002c3e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0201 	mvn.w	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002c36:	bf00      	nop
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_ADC_ConfigChannel+0x20>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e0dc      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x1da>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b06      	cmp	r3, #6
 8002c7e:	d81c      	bhi.n	8002cba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b05      	subs	r3, #5
 8002c92:	221f      	movs	r2, #31
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	4019      	ands	r1, r3
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	3b05      	subs	r3, #5
 8002cac:	fa00 f203 	lsl.w	r2, r0, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cb8:	e03c      	b.n	8002d34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d81c      	bhi.n	8002cfc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b23      	subs	r3, #35	@ 0x23
 8002cd4:	221f      	movs	r2, #31
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	4019      	ands	r1, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3b23      	subs	r3, #35	@ 0x23
 8002cee:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cfa:	e01b      	b.n	8002d34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3b41      	subs	r3, #65	@ 0x41
 8002d0e:	221f      	movs	r2, #31
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	4019      	ands	r1, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b41      	subs	r3, #65	@ 0x41
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b09      	cmp	r3, #9
 8002d3a:	d91c      	bls.n	8002d76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68d9      	ldr	r1, [r3, #12]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3b1e      	subs	r3, #30
 8002d4e:	2207      	movs	r2, #7
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	4019      	ands	r1, r3
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	6898      	ldr	r0, [r3, #8]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	3b1e      	subs	r3, #30
 8002d68:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	60da      	str	r2, [r3, #12]
 8002d74:	e019      	b.n	8002daa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6919      	ldr	r1, [r3, #16]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	2207      	movs	r2, #7
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	4019      	ands	r1, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	6898      	ldr	r0, [r3, #8]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d003      	beq.n	8002dba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	d132      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8002e34 <HAL_ADC_ConfigChannel+0x1e4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d125      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d126      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002de0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d11a      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dea:	4b13      	ldr	r3, [pc, #76]	@ (8002e38 <HAL_ADC_ConfigChannel+0x1e8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a13      	ldr	r2, [pc, #76]	@ (8002e3c <HAL_ADC_ConfigChannel+0x1ec>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	0c9a      	lsrs	r2, r3, #18
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e00:	e002      	b.n	8002e08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f9      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x1b2>
 8002e0e:	e007      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40012400 	.word	0x40012400
 8002e38:	200005e4 	.word	0x200005e4
 8002e3c:	431bde83 	.word	0x431bde83

08002e40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d040      	beq.n	8002ee0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f042 0201 	orr.w	r2, r2, #1
 8002e6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <ADC_Enable+0xac>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef0 <ADC_Enable+0xb0>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e7c:	e002      	b.n	8002e84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f9      	bne.n	8002e7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e8a:	f7ff fc75 	bl	8002778 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e90:	e01f      	b.n	8002ed2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e92:	f7ff fc71 	bl	8002778 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d918      	bls.n	8002ed2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d011      	beq.n	8002ed2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	f043 0210 	orr.w	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	f043 0201 	orr.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e007      	b.n	8002ee2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d1d8      	bne.n	8002e92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200005e4 	.word	0x200005e4
 8002ef0:	431bde83 	.word	0x431bde83

08002ef4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d12e      	bne.n	8002f6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f1e:	f7ff fc2b 	bl	8002778 <HAL_GetTick>
 8002f22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f24:	e01b      	b.n	8002f5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f26:	f7ff fc27 	bl	8002778 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d914      	bls.n	8002f5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d10d      	bne.n	8002f5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	f043 0210 	orr.w	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f52:	f043 0201 	orr.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e007      	b.n	8002f6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d0dc      	beq.n	8002f26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_ADCEx_Calibration_Start+0x1e>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e097      	b.n	80030c6 <HAL_ADCEx_Calibration_Start+0x14e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa8 	bl	8002ef4 <ADC_ConversionStop_Disable>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff ff49 	bl	8002e40 <ADC_Enable>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 8081 	bne.w	80030bc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fc2:	f023 0302 	bic.w	r3, r3, #2
 8002fc6:	f043 0202 	orr.w	r2, r3, #2
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002fce:	4b40      	ldr	r3, [pc, #256]	@ (80030d0 <HAL_ADCEx_Calibration_Start+0x158>)
 8002fd0:	681c      	ldr	r4, [r3, #0]
 8002fd2:	2002      	movs	r0, #2
 8002fd4:	f002 fe76 	bl	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002fde:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002fe0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002fe2:	e002      	b.n	8002fea <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f9      	bne.n	8002fe4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0208 	orr.w	r2, r2, #8
 8002ffe:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003000:	f7ff fbba 	bl	8002778 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003006:	e01b      	b.n	8003040 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003008:	f7ff fbb6 	bl	8002778 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b0a      	cmp	r3, #10
 8003014:	d914      	bls.n	8003040 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00d      	beq.n	8003040 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	f023 0312 	bic.w	r3, r3, #18
 800302c:	f043 0210 	orr.w	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e042      	b.n	80030c6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1dc      	bne.n	8003008 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0204 	orr.w	r2, r2, #4
 800305c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800305e:	f7ff fb8b 	bl	8002778 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003064:	e01b      	b.n	800309e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003066:	f7ff fb87 	bl	8002778 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b0a      	cmp	r3, #10
 8003072:	d914      	bls.n	800309e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00d      	beq.n	800309e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	f023 0312 	bic.w	r3, r3, #18
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e013      	b.n	80030c6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1dc      	bne.n	8003066 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	f023 0303 	bic.w	r3, r3, #3
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200005e4 	.word	0x200005e4

080030d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
	...

080030e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <__NVIC_SetPriorityGrouping+0x44>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003104:	4013      	ands	r3, r2
 8003106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003110:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311a:	4a04      	ldr	r2, [pc, #16]	@ (800312c <__NVIC_SetPriorityGrouping+0x44>)
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	60d3      	str	r3, [r2, #12]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000ed00 	.word	0xe000ed00

08003130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003134:	4b04      	ldr	r3, [pc, #16]	@ (8003148 <__NVIC_GetPriorityGrouping+0x18>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	0a1b      	lsrs	r3, r3, #8
 800313a:	f003 0307 	and.w	r3, r3, #7
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	2b00      	cmp	r3, #0
 800315c:	db0b      	blt.n	8003176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315e:	79fb      	ldrb	r3, [r7, #7]
 8003160:	f003 021f 	and.w	r2, r3, #31
 8003164:	4906      	ldr	r1, [pc, #24]	@ (8003180 <__NVIC_EnableIRQ+0x34>)
 8003166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2001      	movs	r0, #1
 800316e:	fa00 f202 	lsl.w	r2, r0, r2
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	490c      	ldr	r1, [pc, #48]	@ (80031d0 <__NVIC_SetPriority+0x4c>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4908      	ldr	r1, [pc, #32]	@ (80031d4 <__NVIC_SetPriority+0x50>)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	3b04      	subs	r3, #4
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	@ 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf28      	it	cs
 80031f6:	2304      	movcs	r3, #4
 80031f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d902      	bls.n	8003208 <NVIC_EncodePriority+0x30>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b03      	subs	r3, #3
 8003206:	e000      	b.n	800320a <NVIC_EncodePriority+0x32>
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	401a      	ands	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43d9      	mvns	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	4313      	orrs	r3, r2
         );
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	@ 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800324c:	d301      	bcc.n	8003252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324e:	2301      	movs	r3, #1
 8003250:	e00f      	b.n	8003272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <SysTick_Config+0x40>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325a:	210f      	movs	r1, #15
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	f7ff ff90 	bl	8003184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003264:	4b05      	ldr	r3, [pc, #20]	@ (800327c <SysTick_Config+0x40>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326a:	4b04      	ldr	r3, [pc, #16]	@ (800327c <SysTick_Config+0x40>)
 800326c:	2207      	movs	r2, #7
 800326e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000e010 	.word	0xe000e010

08003280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff2d 	bl	80030e8 <__NVIC_SetPriorityGrouping>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a8:	f7ff ff42 	bl	8003130 <__NVIC_GetPriorityGrouping>
 80032ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff ff90 	bl	80031d8 <NVIC_EncodePriority>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff5f 	bl	8003184 <__NVIC_SetPriority>
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff35 	bl	800314c <__NVIC_EnableIRQ>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffa2 	bl	800323c <SysTick_Config>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003302:	b480      	push	{r7}
 8003304:	b085      	sub	sp, #20
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d008      	beq.n	800332c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2204      	movs	r2, #4
 800331e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e020      	b.n	800336e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 020e 	bic.w	r2, r2, #14
 800333a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f202 	lsl.w	r2, r1, r2
 800335a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d005      	beq.n	800339c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2204      	movs	r2, #4
 8003394:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	e051      	b.n	8003440 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 020e 	bic.w	r2, r2, #14
 80033aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a22      	ldr	r2, [pc, #136]	@ (800344c <HAL_DMA_Abort_IT+0xd4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d029      	beq.n	800341a <HAL_DMA_Abort_IT+0xa2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a21      	ldr	r2, [pc, #132]	@ (8003450 <HAL_DMA_Abort_IT+0xd8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_Abort_IT+0x9e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003454 <HAL_DMA_Abort_IT+0xdc>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01a      	beq.n	8003410 <HAL_DMA_Abort_IT+0x98>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1e      	ldr	r2, [pc, #120]	@ (8003458 <HAL_DMA_Abort_IT+0xe0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d012      	beq.n	800340a <HAL_DMA_Abort_IT+0x92>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	@ (800345c <HAL_DMA_Abort_IT+0xe4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00a      	beq.n	8003404 <HAL_DMA_Abort_IT+0x8c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003460 <HAL_DMA_Abort_IT+0xe8>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d102      	bne.n	80033fe <HAL_DMA_Abort_IT+0x86>
 80033f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80033fc:	e00e      	b.n	800341c <HAL_DMA_Abort_IT+0xa4>
 80033fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003402:	e00b      	b.n	800341c <HAL_DMA_Abort_IT+0xa4>
 8003404:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003408:	e008      	b.n	800341c <HAL_DMA_Abort_IT+0xa4>
 800340a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800340e:	e005      	b.n	800341c <HAL_DMA_Abort_IT+0xa4>
 8003410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003414:	e002      	b.n	800341c <HAL_DMA_Abort_IT+0xa4>
 8003416:	2310      	movs	r3, #16
 8003418:	e000      	b.n	800341c <HAL_DMA_Abort_IT+0xa4>
 800341a:	2301      	movs	r3, #1
 800341c:	4a11      	ldr	r2, [pc, #68]	@ (8003464 <HAL_DMA_Abort_IT+0xec>)
 800341e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
    } 
  }
  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40020008 	.word	0x40020008
 8003450:	4002001c 	.word	0x4002001c
 8003454:	40020030 	.word	0x40020030
 8003458:	40020044 	.word	0x40020044
 800345c:	40020058 	.word	0x40020058
 8003460:	4002006c 	.word	0x4002006c
 8003464:	40020000 	.word	0x40020000

08003468 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003476:	b2db      	uxtb	r3, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr
	...

08003484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003484:	b480      	push	{r7}
 8003486:	b08b      	sub	sp, #44	@ 0x2c
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003492:	2300      	movs	r3, #0
 8003494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003496:	e169      	b.n	800376c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003498:	2201      	movs	r2, #1
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69fa      	ldr	r2, [r7, #28]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	f040 8158 	bne.w	8003766 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4a9a      	ldr	r2, [pc, #616]	@ (8003724 <HAL_GPIO_Init+0x2a0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d05e      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034c0:	4a98      	ldr	r2, [pc, #608]	@ (8003724 <HAL_GPIO_Init+0x2a0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d875      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034c6:	4a98      	ldr	r2, [pc, #608]	@ (8003728 <HAL_GPIO_Init+0x2a4>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d058      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034cc:	4a96      	ldr	r2, [pc, #600]	@ (8003728 <HAL_GPIO_Init+0x2a4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d86f      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034d2:	4a96      	ldr	r2, [pc, #600]	@ (800372c <HAL_GPIO_Init+0x2a8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d052      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034d8:	4a94      	ldr	r2, [pc, #592]	@ (800372c <HAL_GPIO_Init+0x2a8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d869      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034de:	4a94      	ldr	r2, [pc, #592]	@ (8003730 <HAL_GPIO_Init+0x2ac>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d04c      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034e4:	4a92      	ldr	r2, [pc, #584]	@ (8003730 <HAL_GPIO_Init+0x2ac>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d863      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034ea:	4a92      	ldr	r2, [pc, #584]	@ (8003734 <HAL_GPIO_Init+0x2b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d046      	beq.n	800357e <HAL_GPIO_Init+0xfa>
 80034f0:	4a90      	ldr	r2, [pc, #576]	@ (8003734 <HAL_GPIO_Init+0x2b0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d85d      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034f6:	2b12      	cmp	r3, #18
 80034f8:	d82a      	bhi.n	8003550 <HAL_GPIO_Init+0xcc>
 80034fa:	2b12      	cmp	r3, #18
 80034fc:	d859      	bhi.n	80035b2 <HAL_GPIO_Init+0x12e>
 80034fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <HAL_GPIO_Init+0x80>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	0800357f 	.word	0x0800357f
 8003508:	08003559 	.word	0x08003559
 800350c:	0800356b 	.word	0x0800356b
 8003510:	080035ad 	.word	0x080035ad
 8003514:	080035b3 	.word	0x080035b3
 8003518:	080035b3 	.word	0x080035b3
 800351c:	080035b3 	.word	0x080035b3
 8003520:	080035b3 	.word	0x080035b3
 8003524:	080035b3 	.word	0x080035b3
 8003528:	080035b3 	.word	0x080035b3
 800352c:	080035b3 	.word	0x080035b3
 8003530:	080035b3 	.word	0x080035b3
 8003534:	080035b3 	.word	0x080035b3
 8003538:	080035b3 	.word	0x080035b3
 800353c:	080035b3 	.word	0x080035b3
 8003540:	080035b3 	.word	0x080035b3
 8003544:	080035b3 	.word	0x080035b3
 8003548:	08003561 	.word	0x08003561
 800354c:	08003575 	.word	0x08003575
 8003550:	4a79      	ldr	r2, [pc, #484]	@ (8003738 <HAL_GPIO_Init+0x2b4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d013      	beq.n	800357e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003556:	e02c      	b.n	80035b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	623b      	str	r3, [r7, #32]
          break;
 800355e:	e029      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	3304      	adds	r3, #4
 8003566:	623b      	str	r3, [r7, #32]
          break;
 8003568:	e024      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	3308      	adds	r3, #8
 8003570:	623b      	str	r3, [r7, #32]
          break;
 8003572:	e01f      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	330c      	adds	r3, #12
 800357a:	623b      	str	r3, [r7, #32]
          break;
 800357c:	e01a      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003586:	2304      	movs	r3, #4
 8003588:	623b      	str	r3, [r7, #32]
          break;
 800358a:	e013      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d105      	bne.n	80035a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003594:	2308      	movs	r3, #8
 8003596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	611a      	str	r2, [r3, #16]
          break;
 800359e:	e009      	b.n	80035b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035a0:	2308      	movs	r3, #8
 80035a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69fa      	ldr	r2, [r7, #28]
 80035a8:	615a      	str	r2, [r3, #20]
          break;
 80035aa:	e003      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035ac:	2300      	movs	r3, #0
 80035ae:	623b      	str	r3, [r7, #32]
          break;
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_Init+0x130>
          break;
 80035b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2bff      	cmp	r3, #255	@ 0xff
 80035b8:	d801      	bhi.n	80035be <HAL_GPIO_Init+0x13a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	e001      	b.n	80035c2 <HAL_GPIO_Init+0x13e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	2bff      	cmp	r3, #255	@ 0xff
 80035c8:	d802      	bhi.n	80035d0 <HAL_GPIO_Init+0x14c>
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	e002      	b.n	80035d6 <HAL_GPIO_Init+0x152>
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	3b08      	subs	r3, #8
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	210f      	movs	r1, #15
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	401a      	ands	r2, r3
 80035e8:	6a39      	ldr	r1, [r7, #32]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	431a      	orrs	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 80b1 	beq.w	8003766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003604:	4b4d      	ldr	r3, [pc, #308]	@ (800373c <HAL_GPIO_Init+0x2b8>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	4a4c      	ldr	r2, [pc, #304]	@ (800373c <HAL_GPIO_Init+0x2b8>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6193      	str	r3, [r2, #24]
 8003610:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <HAL_GPIO_Init+0x2b8>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800361c:	4a48      	ldr	r2, [pc, #288]	@ (8003740 <HAL_GPIO_Init+0x2bc>)
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	220f      	movs	r2, #15
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a40      	ldr	r2, [pc, #256]	@ (8003744 <HAL_GPIO_Init+0x2c0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d013      	beq.n	8003670 <HAL_GPIO_Init+0x1ec>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3f      	ldr	r2, [pc, #252]	@ (8003748 <HAL_GPIO_Init+0x2c4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00d      	beq.n	800366c <HAL_GPIO_Init+0x1e8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3e      	ldr	r2, [pc, #248]	@ (800374c <HAL_GPIO_Init+0x2c8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d007      	beq.n	8003668 <HAL_GPIO_Init+0x1e4>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3d      	ldr	r2, [pc, #244]	@ (8003750 <HAL_GPIO_Init+0x2cc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <HAL_GPIO_Init+0x1e0>
 8003660:	2303      	movs	r3, #3
 8003662:	e006      	b.n	8003672 <HAL_GPIO_Init+0x1ee>
 8003664:	2304      	movs	r3, #4
 8003666:	e004      	b.n	8003672 <HAL_GPIO_Init+0x1ee>
 8003668:	2302      	movs	r3, #2
 800366a:	e002      	b.n	8003672 <HAL_GPIO_Init+0x1ee>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_GPIO_Init+0x1ee>
 8003670:	2300      	movs	r3, #0
 8003672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003674:	f002 0203 	and.w	r2, r2, #3
 8003678:	0092      	lsls	r2, r2, #2
 800367a:	4093      	lsls	r3, r2
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003682:	492f      	ldr	r1, [pc, #188]	@ (8003740 <HAL_GPIO_Init+0x2bc>)
 8003684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3302      	adds	r3, #2
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d006      	beq.n	80036aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800369c:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	492c      	ldr	r1, [pc, #176]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
 80036a8:	e006      	b.n	80036b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	4928      	ldr	r1, [pc, #160]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036c4:	4b23      	ldr	r3, [pc, #140]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	4922      	ldr	r1, [pc, #136]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60cb      	str	r3, [r1, #12]
 80036d0:	e006      	b.n	80036e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036d2:	4b20      	ldr	r3, [pc, #128]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	43db      	mvns	r3, r3
 80036da:	491e      	ldr	r1, [pc, #120]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036dc:	4013      	ands	r3, r2
 80036de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d006      	beq.n	80036fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036ec:	4b19      	ldr	r3, [pc, #100]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	4918      	ldr	r1, [pc, #96]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]
 80036f8:	e006      	b.n	8003708 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036fa:	4b16      	ldr	r3, [pc, #88]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	43db      	mvns	r3, r3
 8003702:	4914      	ldr	r1, [pc, #80]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 8003704:	4013      	ands	r3, r2
 8003706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d021      	beq.n	8003758 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003714:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	490e      	ldr	r1, [pc, #56]	@ (8003754 <HAL_GPIO_Init+0x2d0>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e021      	b.n	8003766 <HAL_GPIO_Init+0x2e2>
 8003722:	bf00      	nop
 8003724:	10320000 	.word	0x10320000
 8003728:	10310000 	.word	0x10310000
 800372c:	10220000 	.word	0x10220000
 8003730:	10210000 	.word	0x10210000
 8003734:	10120000 	.word	0x10120000
 8003738:	10110000 	.word	0x10110000
 800373c:	40021000 	.word	0x40021000
 8003740:	40010000 	.word	0x40010000
 8003744:	40010800 	.word	0x40010800
 8003748:	40010c00 	.word	0x40010c00
 800374c:	40011000 	.word	0x40011000
 8003750:	40011400 	.word	0x40011400
 8003754:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003758:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_GPIO_Init+0x304>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	43db      	mvns	r3, r3
 8003760:	4909      	ldr	r1, [pc, #36]	@ (8003788 <HAL_GPIO_Init+0x304>)
 8003762:	4013      	ands	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	3301      	adds	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	fa22 f303 	lsr.w	r3, r2, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	f47f ae8e 	bne.w	8003498 <HAL_GPIO_Init+0x14>
  }
}
 800377c:	bf00      	nop
 800377e:	bf00      	nop
 8003780:	372c      	adds	r7, #44	@ 0x2c
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40010400 	.word	0x40010400

0800378c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	807b      	strh	r3, [r7, #2]
 8003798:	4613      	mov	r3, r2
 800379a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800379c:	787b      	ldrb	r3, [r7, #1]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037a2:	887a      	ldrh	r2, [r7, #2]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037a8:	e003      	b.n	80037b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037aa:	887b      	ldrh	r3, [r7, #2]
 80037ac:	041a      	lsls	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	611a      	str	r2, [r3, #16]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e12b      	b.n	8003a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fe fda4 	bl	8002330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	@ 0x24
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800380e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800381e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003820:	f002 f954 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 8003824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a81      	ldr	r2, [pc, #516]	@ (8003a30 <HAL_I2C_Init+0x274>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d807      	bhi.n	8003840 <HAL_I2C_Init+0x84>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a80      	ldr	r2, [pc, #512]	@ (8003a34 <HAL_I2C_Init+0x278>)
 8003834:	4293      	cmp	r3, r2
 8003836:	bf94      	ite	ls
 8003838:	2301      	movls	r3, #1
 800383a:	2300      	movhi	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e006      	b.n	800384e <HAL_I2C_Init+0x92>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a7d      	ldr	r2, [pc, #500]	@ (8003a38 <HAL_I2C_Init+0x27c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	bf94      	ite	ls
 8003848:	2301      	movls	r3, #1
 800384a:	2300      	movhi	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e0e7      	b.n	8003a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a78      	ldr	r2, [pc, #480]	@ (8003a3c <HAL_I2C_Init+0x280>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0c9b      	lsrs	r3, r3, #18
 8003860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	4a6a      	ldr	r2, [pc, #424]	@ (8003a30 <HAL_I2C_Init+0x274>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d802      	bhi.n	8003890 <HAL_I2C_Init+0xd4>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3301      	adds	r3, #1
 800388e:	e009      	b.n	80038a4 <HAL_I2C_Init+0xe8>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	4a69      	ldr	r2, [pc, #420]	@ (8003a40 <HAL_I2C_Init+0x284>)
 800389c:	fba2 2303 	umull	r2, r3, r2, r3
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	3301      	adds	r3, #1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6812      	ldr	r2, [r2, #0]
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	495c      	ldr	r1, [pc, #368]	@ (8003a30 <HAL_I2C_Init+0x274>)
 80038c0:	428b      	cmp	r3, r1
 80038c2:	d819      	bhi.n	80038f8 <HAL_I2C_Init+0x13c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1e59      	subs	r1, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d2:	1c59      	adds	r1, r3, #1
 80038d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038d8:	400b      	ands	r3, r1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_I2C_Init+0x138>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e59      	subs	r1, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ec:	3301      	adds	r3, #1
 80038ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f2:	e051      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 80038f4:	2304      	movs	r3, #4
 80038f6:	e04f      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d111      	bne.n	8003924 <HAL_I2C_Init+0x168>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e012      	b.n	800394a <HAL_I2C_Init+0x18e>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	0099      	lsls	r1, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_Init+0x196>
 800394e:	2301      	movs	r3, #1
 8003950:	e022      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10e      	bne.n	8003978 <HAL_I2C_Init+0x1bc>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	1e58      	subs	r0, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	460b      	mov	r3, r1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	440b      	add	r3, r1
 8003968:	fbb0 f3f3 	udiv	r3, r0, r3
 800396c:	3301      	adds	r3, #1
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003976:	e00f      	b.n	8003998 <HAL_I2C_Init+0x1dc>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e58      	subs	r0, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	0099      	lsls	r1, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	fbb0 f3f3 	udiv	r3, r0, r3
 800398e:	3301      	adds	r3, #1
 8003990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003994:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	6809      	ldr	r1, [r1, #0]
 800399c:	4313      	orrs	r3, r2
 800399e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6911      	ldr	r1, [r2, #16]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	4311      	orrs	r1, r2
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	430b      	orrs	r3, r1
 80039da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695a      	ldr	r2, [r3, #20]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	000186a0 	.word	0x000186a0
 8003a34:	001e847f 	.word	0x001e847f
 8003a38:	003d08ff 	.word	0x003d08ff
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	10624dd3 	.word	0x10624dd3

08003a44 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a56:	2b80      	cmp	r3, #128	@ 0x80
 8003a58:	d103      	bne.n	8003a62 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	611a      	str	r2, [r3, #16]
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	f040 8096 	bne.w	8003bc4 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a98:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd0 <HAL_I2C_Mem_Read_IT+0x164>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd4 <HAL_I2C_Mem_Read_IT+0x168>)
 8003aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa4:	0a1a      	lsrs	r2, r3, #8
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009a      	lsls	r2, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d112      	bne.n	8003ae4 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	f043 0220 	orr.w	r2, r3, #32
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e070      	b.n	8003bc6 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d0df      	beq.n	8003ab2 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2C_Mem_Read_IT+0x94>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e062      	b.n	8003bc6 <HAL_I2C_Mem_Read_IT+0x15a>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d007      	beq.n	8003b26 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b34:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2222      	movs	r2, #34	@ 0x22
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2240      	movs	r2, #64	@ 0x40
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd8 <HAL_I2C_Mem_Read_IT+0x16c>)
 8003b66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003b68:	897a      	ldrh	r2, [r7, #10]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8003b6e:	893a      	ldrh	r2, [r7, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d007      	beq.n	8003bc0 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003bbe:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	200005e4 	.word	0x200005e4
 8003bd4:	14f8b589 	.word	0x14f8b589
 8003bd8:	ffff0000 	.word	0xffff0000

08003bdc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bfc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d003      	beq.n	8003c14 <HAL_I2C_EV_IRQHandler+0x38>
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b40      	cmp	r3, #64	@ 0x40
 8003c10:	f040 80b1 	bne.w	8003d76 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10d      	bne.n	8003c4a <HAL_I2C_EV_IRQHandler+0x6e>
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003c34:	d003      	beq.n	8003c3e <HAL_I2C_EV_IRQHandler+0x62>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2C_EV_IRQHandler+0x66>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <HAL_I2C_EV_IRQHandler+0x68>
 8003c42:	2300      	movs	r3, #0
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	f000 8114 	beq.w	8003e72 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <HAL_I2C_EV_IRQHandler+0x90>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d006      	beq.n	8003c6c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f001 fb50 	bl	8005304 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fcc4 	bl	80045f2 <I2C_Master_SB>
 8003c6a:	e083      	b.n	8003d74 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d008      	beq.n	8003c88 <HAL_I2C_EV_IRQHandler+0xac>
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 fd3b 	bl	80046fc <I2C_Master_ADD10>
 8003c86:	e075      	b.n	8003d74 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_I2C_EV_IRQHandler+0xc8>
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fd56 	bl	800474e <I2C_Master_ADDR>
 8003ca2:	e067      	b.n	8003d74 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d036      	beq.n	8003d1c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cbc:	f000 80db 	beq.w	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x10a>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x10a>
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f924 	bl	8003f2c <I2C_MasterTransmit_TXE>
 8003ce4:	e046      	b.n	8003d74 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80c2 	beq.w	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80bc 	beq.w	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003cfe:	7bbb      	ldrb	r3, [r7, #14]
 8003d00:	2b21      	cmp	r3, #33	@ 0x21
 8003d02:	d103      	bne.n	8003d0c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9ad 	bl	8004064 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d0a:	e0b4      	b.n	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b40      	cmp	r3, #64	@ 0x40
 8003d10:	f040 80b1 	bne.w	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fa1b 	bl	8004150 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d1a:	e0ac      	b.n	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d2a:	f000 80a4 	beq.w	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00d      	beq.n	8003d54 <HAL_I2C_EV_IRQHandler+0x178>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_I2C_EV_IRQHandler+0x178>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fa97 	bl	8004280 <I2C_MasterReceive_RXNE>
 8003d52:	e00f      	b.n	8003d74 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 808b 	beq.w	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8085 	beq.w	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fb4f 	bl	8004410 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d72:	e080      	b.n	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d74:	e07f      	b.n	8003e76 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d004      	beq.n	8003d88 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	e007      	b.n	8003d98 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d011      	beq.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003dbc:	69b9      	ldr	r1, [r7, #24]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 ff1c 	bl	8004bfc <I2C_Slave_ADDR>
 8003dc4:	e05a      	b.n	8003e7c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x206>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 ff56 	bl	8004c8c <I2C_Slave_STOPF>
 8003de0:	e04c      	b.n	8003e7c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003de2:	7bbb      	ldrb	r3, [r7, #14]
 8003de4:	2b21      	cmp	r3, #33	@ 0x21
 8003de6:	d002      	beq.n	8003dee <HAL_I2C_EV_IRQHandler+0x212>
 8003de8:	7bbb      	ldrb	r3, [r7, #14]
 8003dea:	2b29      	cmp	r3, #41	@ 0x29
 8003dec:	d120      	bne.n	8003e30 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_I2C_EV_IRQHandler+0x238>
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_I2C_EV_IRQHandler+0x238>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fe39 	bl	8004a84 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e12:	e032      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d02d      	beq.n	8003e7a <HAL_I2C_EV_IRQHandler+0x29e>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d028      	beq.n	8003e7a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fe68 	bl	8004afe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e2e:	e024      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d008      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fe75 	bl	8004b3e <I2C_SlaveReceive_RXNE>
 8003e54:	e012      	b.n	8003e7c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fea5 	bl	8004bba <I2C_SlaveReceive_BTF>
 8003e70:	e004      	b.n	8003e7c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e7a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr

08003eca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70fb      	strb	r3, [r7, #3]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f48:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d150      	bne.n	8003ff4 <I2C_MasterTransmit_TXE+0xc8>
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	2b21      	cmp	r3, #33	@ 0x21
 8003f56:	d14d      	bne.n	8003ff4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d01d      	beq.n	8003f9a <I2C_MasterTransmit_TXE+0x6e>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d01a      	beq.n	8003f9a <I2C_MasterTransmit_TXE+0x6e>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f6a:	d016      	beq.n	8003f9a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f7a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2211      	movs	r2, #17
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff ff75 	bl	8003e82 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f98:	e060      	b.n	800405c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fa8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b40      	cmp	r3, #64	@ 0x40
 8003fd2:	d107      	bne.n	8003fe4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ff8a 	bl	8003ef6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fe2:	e03b      	b.n	800405c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff48 	bl	8003e82 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ff2:	e033      	b.n	800405c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b21      	cmp	r3, #33	@ 0x21
 8003ff8:	d005      	beq.n	8004006 <I2C_MasterTransmit_TXE+0xda>
 8003ffa:	7bbb      	ldrb	r3, [r7, #14]
 8003ffc:	2b40      	cmp	r3, #64	@ 0x40
 8003ffe:	d12d      	bne.n	800405c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	2b22      	cmp	r3, #34	@ 0x22
 8004004:	d12a      	bne.n	800405c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d108      	bne.n	8004022 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800401e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004020:	e01c      	b.n	800405c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b40      	cmp	r3, #64	@ 0x40
 800402c:	d103      	bne.n	8004036 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f88e 	bl	8004150 <I2C_MemoryTransmit_TXE_BTF>
}
 8004034:	e012      	b.n	800405c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	781a      	ldrb	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800405a:	e7ff      	b.n	800405c <I2C_MasterTransmit_TXE+0x130>
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004070:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b21      	cmp	r3, #33	@ 0x21
 800407c:	d164      	bne.n	8004148 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d012      	beq.n	80040ae <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	781a      	ldrb	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80040ac:	e04c      	b.n	8004148 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d01d      	beq.n	80040f0 <I2C_MasterTransmit_BTF+0x8c>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b20      	cmp	r3, #32
 80040b8:	d01a      	beq.n	80040f0 <I2C_MasterTransmit_BTF+0x8c>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040c0:	d016      	beq.n	80040f0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040d0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2211      	movs	r2, #17
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7ff feca 	bl	8003e82 <HAL_I2C_MasterTxCpltCallback>
}
 80040ee:	e02b      	b.n	8004148 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040fe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800410e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b40      	cmp	r3, #64	@ 0x40
 8004128:	d107      	bne.n	800413a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff fedf 	bl	8003ef6 <HAL_I2C_MemTxCpltCallback>
}
 8004138:	e006      	b.n	8004148 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fe9d 	bl	8003e82 <HAL_I2C_MasterTxCpltCallback>
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11d      	bne.n	80041a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10b      	bne.n	8004188 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004174:	b2da      	uxtb	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004186:	e077      	b.n	8004278 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800418c:	b29b      	uxth	r3, r3
 800418e:	121b      	asrs	r3, r3, #8
 8004190:	b2da      	uxtb	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041a2:	e069      	b.n	8004278 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d10b      	bne.n	80041c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041c2:	e059      	b.n	8004278 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d152      	bne.n	8004272 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b22      	cmp	r3, #34	@ 0x22
 80041d0:	d10d      	bne.n	80041ee <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041ec:	e044      	b.n	8004278 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d015      	beq.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b21      	cmp	r3, #33	@ 0x21
 80041fc:	d112      	bne.n	8004224 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004222:	e029      	b.n	8004278 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d124      	bne.n	8004278 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b21      	cmp	r3, #33	@ 0x21
 8004232:	d121      	bne.n	8004278 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004242:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004252:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fe43 	bl	8003ef6 <HAL_I2C_MemTxCpltCallback>
}
 8004270:	e002      	b.n	8004278 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff fbe6 	bl	8003a44 <I2C_Flush_DR>
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b22      	cmp	r3, #34	@ 0x22
 8004292:	f040 80b9 	bne.w	8004408 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d921      	bls.n	80042ee <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	f040 8096 	bne.w	8004408 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ea:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80042ec:	e08c      	b.n	8004408 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d07f      	beq.n	80043f6 <I2C_MasterReceive_RXNE+0x176>
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d002      	beq.n	8004302 <I2C_MasterReceive_RXNE+0x82>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d179      	bne.n	80043f6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 ffcc 	bl	80052a0 <I2C_WaitOnSTOPRequestThroughIT>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d14c      	bne.n	80043a8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800432c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b40      	cmp	r3, #64	@ 0x40
 8004366:	d10a      	bne.n	800437e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fe0e 	bl	8000f98 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800437c:	e044      	b.n	8004408 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d002      	beq.n	8004392 <I2C_MasterReceive_RXNE+0x112>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b20      	cmp	r3, #32
 8004390:	d103      	bne.n	800439a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
 8004398:	e002      	b.n	80043a0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2212      	movs	r2, #18
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7ff fd77 	bl	8003e94 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043a6:	e02f      	b.n	8004408 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043b6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff fd8a 	bl	8003f08 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043f4:	e008      	b.n	8004408 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004404:	605a      	str	r2, [r3, #4]
}
 8004406:	e7ff      	b.n	8004408 <I2C_MasterReceive_RXNE+0x188>
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b04      	cmp	r3, #4
 8004426:	d11b      	bne.n	8004460 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004436:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800445e:	e0c4      	b.n	80045ea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b03      	cmp	r3, #3
 8004468:	d129      	bne.n	80044be <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004478:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d00a      	beq.n	8004496 <I2C_MasterReceive_BTF+0x86>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d007      	beq.n	8004496 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004494:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80044bc:	e095      	b.n	80045ea <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d17d      	bne.n	80045c4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d002      	beq.n	80044d4 <I2C_MasterReceive_BTF+0xc4>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b10      	cmp	r3, #16
 80044d2:	d108      	bne.n	80044e6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e016      	b.n	8004514 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d002      	beq.n	80044f2 <I2C_MasterReceive_BTF+0xe2>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d108      	bne.n	8004504 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	e007      	b.n	8004514 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004512:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800456e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d10a      	bne.n	800459a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fc fd00 	bl	8000f98 <HAL_I2C_MemRxCpltCallback>
}
 8004598:	e027      	b.n	80045ea <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d002      	beq.n	80045ae <I2C_MasterReceive_BTF+0x19e>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d103      	bne.n	80045b6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80045b4:	e002      	b.n	80045bc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2212      	movs	r2, #18
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fc69 	bl	8003e94 <HAL_I2C_MasterRxCpltCallback>
}
 80045c2:	e012      	b.n	80045ea <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b40      	cmp	r3, #64	@ 0x40
 8004604:	d117      	bne.n	8004636 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	b2db      	uxtb	r3, r3
 8004614:	461a      	mov	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800461e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004620:	e067      	b.n	80046f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	b2da      	uxtb	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]
}
 8004634:	e05d      	b.n	80046f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800463e:	d133      	bne.n	80046a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b21      	cmp	r3, #33	@ 0x21
 800464a:	d109      	bne.n	8004660 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800465c:	611a      	str	r2, [r3, #16]
 800465e:	e008      	b.n	8004672 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <I2C_Master_SB+0x92>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d032      	beq.n	80046f2 <I2C_Master_SB+0x100>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	2b00      	cmp	r3, #0
 8004694:	d02d      	beq.n	80046f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a4:	605a      	str	r2, [r3, #4]
}
 80046a6:	e024      	b.n	80046f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10e      	bne.n	80046ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	11db      	asrs	r3, r3, #7
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 0306 	and.w	r3, r3, #6
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f063 030f 	orn	r3, r3, #15
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]
}
 80046cc:	e011      	b.n	80046f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d10d      	bne.n	80046f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046da:	b29b      	uxth	r3, r3
 80046dc:	11db      	asrs	r3, r3, #7
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 0306 	and.w	r3, r3, #6
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f063 030e 	orn	r3, r3, #14
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	611a      	str	r2, [r3, #16]
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004708:	b2da      	uxtb	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <I2C_Master_ADD10+0x26>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d108      	bne.n	8004734 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00c      	beq.n	8004744 <I2C_Master_ADD10+0x48>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	2b00      	cmp	r3, #0
 8004732:	d007      	beq.n	8004744 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004742:	605a      	str	r2, [r3, #4]
  }
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800474e:	b480      	push	{r7}
 8004750:	b091      	sub	sp, #68	@ 0x44
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800475c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b22      	cmp	r3, #34	@ 0x22
 8004776:	f040 8174 	bne.w	8004a62 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <I2C_Master_ADDR+0x54>
 8004782:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004786:	2b40      	cmp	r3, #64	@ 0x40
 8004788:	d10b      	bne.n	80047a2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478a:	2300      	movs	r3, #0
 800478c:	633b      	str	r3, [r7, #48]	@ 0x30
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	633b      	str	r3, [r7, #48]	@ 0x30
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	633b      	str	r3, [r7, #48]	@ 0x30
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	e16b      	b.n	8004a7a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11d      	bne.n	80047e6 <I2C_Master_ADDR+0x98>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80047b2:	d118      	bne.n	80047e6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b4:	2300      	movs	r3, #0
 80047b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80047e4:	e149      	b.n	8004a7a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d113      	bne.n	8004818 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f0:	2300      	movs	r3, #0
 80047f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e120      	b.n	8004a5a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	f040 808a 	bne.w	8004938 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004826:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800482a:	d137      	bne.n	800489c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004846:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800484a:	d113      	bne.n	8004874 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800485a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	e0f2      	b.n	8004a5a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004874:	2300      	movs	r3, #0
 8004876:	623b      	str	r3, [r7, #32]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	623b      	str	r3, [r7, #32]
 8004888:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e0de      	b.n	8004a5a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800489c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d02e      	beq.n	8004900 <I2C_Master_ADDR+0x1b2>
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d02b      	beq.n	8004900 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048aa:	2b12      	cmp	r3, #18
 80048ac:	d102      	bne.n	80048b4 <I2C_Master_ADDR+0x166>
 80048ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d125      	bne.n	8004900 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d00e      	beq.n	80048d8 <I2C_Master_ADDR+0x18a>
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d00b      	beq.n	80048d8 <I2C_Master_ADDR+0x18a>
 80048c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d008      	beq.n	80048d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	e007      	b.n	80048e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e8:	2300      	movs	r3, #0
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	e0ac      	b.n	8004a5a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800490e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e090      	b.n	8004a5a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d158      	bne.n	80049f4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004944:	2b04      	cmp	r3, #4
 8004946:	d021      	beq.n	800498c <I2C_Master_ADDR+0x23e>
 8004948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800494a:	2b02      	cmp	r3, #2
 800494c:	d01e      	beq.n	800498c <I2C_Master_ADDR+0x23e>
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	2b10      	cmp	r3, #16
 8004952:	d01b      	beq.n	800498c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004962:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e012      	b.n	80049b2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800499a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c0:	d14b      	bne.n	8004a5a <I2C_Master_ADDR+0x30c>
 80049c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049c8:	d00b      	beq.n	80049e2 <I2C_Master_ADDR+0x294>
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d008      	beq.n	80049e2 <I2C_Master_ADDR+0x294>
 80049d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d005      	beq.n	80049e2 <I2C_Master_ADDR+0x294>
 80049d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d002      	beq.n	80049e2 <I2C_Master_ADDR+0x294>
 80049dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049de:	2b20      	cmp	r3, #32
 80049e0:	d13b      	bne.n	8004a5a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	e032      	b.n	8004a5a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a02:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a12:	d117      	bne.n	8004a44 <I2C_Master_ADDR+0x2f6>
 8004a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a1a:	d00b      	beq.n	8004a34 <I2C_Master_ADDR+0x2e6>
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d008      	beq.n	8004a34 <I2C_Master_ADDR+0x2e6>
 8004a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d005      	beq.n	8004a34 <I2C_Master_ADDR+0x2e6>
 8004a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d002      	beq.n	8004a34 <I2C_Master_ADDR+0x2e6>
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d107      	bne.n	8004a44 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a42:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a60:	e00b      	b.n	8004a7a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]
}
 8004a78:	e7ff      	b.n	8004a7a <I2C_Master_ADDR+0x32c>
 8004a7a:	bf00      	nop
 8004a7c:	3744      	adds	r7, #68	@ 0x44
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d02b      	beq.n	8004af6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	781a      	ldrb	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d114      	bne.n	8004af6 <I2C_SlaveTransmit_TXE+0x72>
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b29      	cmp	r3, #41	@ 0x29
 8004ad0:	d111      	bne.n	8004af6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2221      	movs	r2, #33	@ 0x21
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2228      	movs	r2, #40	@ 0x28
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7ff f9d8 	bl	8003ea6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d011      	beq.n	8004b34 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d02c      	beq.n	8004bb2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d114      	bne.n	8004bb2 <I2C_SlaveReceive_RXNE+0x74>
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b8c:	d111      	bne.n	8004bb2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2222      	movs	r2, #34	@ 0x22
 8004ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2228      	movs	r2, #40	@ 0x28
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff f983 	bl	8003eb8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c16:	2b28      	cmp	r3, #40	@ 0x28
 8004c18:	d125      	bne.n	8004c66 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c28:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	81bb      	strh	r3, [r7, #12]
 8004c48:	e002      	b.n	8004c50 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c58:	89ba      	ldrh	r2, [r7, #12]
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff f933 	bl	8003eca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c64:	e00e      	b.n	8004c84 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004caa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004cac:	2300      	movs	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cd8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ce8:	d172      	bne.n	8004dd0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	2b22      	cmp	r3, #34	@ 0x22
 8004cee:	d002      	beq.n	8004cf6 <I2C_Slave_STOPF+0x6a>
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cf4:	d135      	bne.n	8004d62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	f043 0204 	orr.w	r2, r3, #4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe fb9a 	bl	8003468 <HAL_DMA_GetState>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d049      	beq.n	8004dce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3e:	4a69      	ldr	r2, [pc, #420]	@ (8004ee4 <I2C_Slave_STOPF+0x258>)
 8004d40:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fb16 	bl	8003378 <HAL_DMA_Abort_IT>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d03d      	beq.n	8004dce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d60:	e035      	b.n	8004dce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f043 0204 	orr.w	r2, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fb64 	bl	8003468 <HAL_DMA_GetState>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d014      	beq.n	8004dd0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004daa:	4a4e      	ldr	r2, [pc, #312]	@ (8004ee4 <I2C_Slave_STOPF+0x258>)
 8004dac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe fae0 	bl	8003378 <HAL_DMA_Abort_IT>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4798      	blx	r3
 8004dcc:	e000      	b.n	8004dd0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d03e      	beq.n	8004e58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d112      	bne.n	8004e0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e18:	2b40      	cmp	r3, #64	@ 0x40
 8004e1a:	d112      	bne.n	8004e42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	f043 0204 	orr.w	r2, r3, #4
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f843 	bl	8004eec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e66:	e039      	b.n	8004edc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e6c:	d109      	bne.n	8004e82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2228      	movs	r2, #40	@ 0x28
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff f81b 	bl	8003eb8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b28      	cmp	r3, #40	@ 0x28
 8004e8c:	d111      	bne.n	8004eb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a15      	ldr	r2, [pc, #84]	@ (8004ee8 <I2C_Slave_STOPF+0x25c>)
 8004e92:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7ff f81a 	bl	8003ee4 <HAL_I2C_ListenCpltCallback>
}
 8004eb0:	e014      	b.n	8004edc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb6:	2b22      	cmp	r3, #34	@ 0x22
 8004eb8:	d002      	beq.n	8004ec0 <I2C_Slave_STOPF+0x234>
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b22      	cmp	r3, #34	@ 0x22
 8004ebe:	d10d      	bne.n	8004edc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fe ffee 	bl	8003eb8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	08005151 	.word	0x08005151
 8004ee8:	ffff0000 	.word	0xffff0000

08004eec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d002      	beq.n	8004f10 <I2C_ITError+0x24>
 8004f0a:	7bbb      	ldrb	r3, [r7, #14]
 8004f0c:	2b40      	cmp	r3, #64	@ 0x40
 8004f0e:	d10a      	bne.n	8004f26 <I2C_ITError+0x3a>
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b22      	cmp	r3, #34	@ 0x22
 8004f14:	d107      	bne.n	8004f26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f2c:	2b28      	cmp	r3, #40	@ 0x28
 8004f2e:	d107      	bne.n	8004f40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2228      	movs	r2, #40	@ 0x28
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f3e:	e015      	b.n	8004f6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f4e:	d00a      	beq.n	8004f66 <I2C_ITError+0x7a>
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b60      	cmp	r3, #96	@ 0x60
 8004f54:	d007      	beq.n	8004f66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f7a:	d162      	bne.n	8005042 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d020      	beq.n	8004fdc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f9e:	4a6a      	ldr	r2, [pc, #424]	@ (8005148 <I2C_ITError+0x25c>)
 8004fa0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe f9e6 	bl	8003378 <HAL_DMA_Abort_IT>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 8089 	beq.w	80050c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4798      	blx	r3
 8004fda:	e074      	b.n	80050c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe0:	4a59      	ldr	r2, [pc, #356]	@ (8005148 <I2C_ITError+0x25c>)
 8004fe2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe f9c5 	bl	8003378 <HAL_DMA_Abort_IT>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d068      	beq.n	80050c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffe:	2b40      	cmp	r3, #64	@ 0x40
 8005000:	d10b      	bne.n	800501a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800503c:	4610      	mov	r0, r2
 800503e:	4798      	blx	r3
 8005040:	e041      	b.n	80050c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b60      	cmp	r3, #96	@ 0x60
 800504c:	d125      	bne.n	800509a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005066:	2b40      	cmp	r3, #64	@ 0x40
 8005068:	d10b      	bne.n	8005082 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fe ff41 	bl	8003f1a <HAL_I2C_AbortCpltCallback>
 8005098:	e015      	b.n	80050c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a4:	2b40      	cmp	r3, #64	@ 0x40
 80050a6:	d10b      	bne.n	80050c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fe ff21 	bl	8003f08 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10e      	bne.n	80050f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005102:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d113      	bne.n	8005140 <I2C_ITError+0x254>
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b28      	cmp	r3, #40	@ 0x28
 800511c:	d110      	bne.n	8005140 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <I2C_ITError+0x260>)
 8005122:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fe fed2 	bl	8003ee4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	08005151 	.word	0x08005151
 800514c:	ffff0000 	.word	0xffff0000

08005150 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005168:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800516a:	4b4b      	ldr	r3, [pc, #300]	@ (8005298 <I2C_DMAAbort+0x148>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	08db      	lsrs	r3, r3, #3
 8005170:	4a4a      	ldr	r2, [pc, #296]	@ (800529c <I2C_DMAAbort+0x14c>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	0a1a      	lsrs	r2, r3, #8
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00da      	lsls	r2, r3, #3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005196:	e00a      	b.n	80051ae <I2C_DMAAbort+0x5e>
    }
    count--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ac:	d0ea      	beq.n	8005184 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ba:	2200      	movs	r2, #0
 80051bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ca:	2200      	movs	r2, #0
 80051cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051dc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2200      	movs	r2, #0
 80051e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f0:	2200      	movs	r2, #0
 80051f2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	2200      	movs	r2, #0
 8005202:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0201 	bic.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b60      	cmp	r3, #96	@ 0x60
 800521e:	d10e      	bne.n	800523e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	f7fe fe6f 	bl	8003f1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800523c:	e027      	b.n	800528e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800523e:	7cfb      	ldrb	r3, [r7, #19]
 8005240:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005244:	2b28      	cmp	r3, #40	@ 0x28
 8005246:	d117      	bne.n	8005278 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005266:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2228      	movs	r2, #40	@ 0x28
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005276:	e007      	b.n	8005288 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005288:	6978      	ldr	r0, [r7, #20]
 800528a:	f7fe fe3d 	bl	8003f08 <HAL_I2C_ErrorCallback>
}
 800528e:	bf00      	nop
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	200005e4 	.word	0x200005e4
 800529c:	14f8b589 	.word	0x14f8b589

080052a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80052ac:	4b13      	ldr	r3, [pc, #76]	@ (80052fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	08db      	lsrs	r3, r3, #3
 80052b2:	4a13      	ldr	r2, [pc, #76]	@ (8005300 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	0a1a      	lsrs	r2, r3, #8
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d107      	bne.n	80052de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	f043 0220 	orr.w	r2, r3, #32
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e008      	b.n	80052f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ec:	d0e9      	beq.n	80052c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	200005e4 	.word	0x200005e4
 8005300:	14f8b589 	.word	0x14f8b589

08005304 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005314:	d103      	bne.n	800531e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800531c:	e007      	b.n	800532e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005322:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005326:	d102      	bne.n	800532e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2208      	movs	r2, #8
 800532c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr

08005338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e272      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8087 	beq.w	8005466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005358:	4b92      	ldr	r3, [pc, #584]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	2b04      	cmp	r3, #4
 8005362:	d00c      	beq.n	800537e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005364:	4b8f      	ldr	r3, [pc, #572]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f003 030c 	and.w	r3, r3, #12
 800536c:	2b08      	cmp	r3, #8
 800536e:	d112      	bne.n	8005396 <HAL_RCC_OscConfig+0x5e>
 8005370:	4b8c      	ldr	r3, [pc, #560]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800537c:	d10b      	bne.n	8005396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800537e:	4b89      	ldr	r3, [pc, #548]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d06c      	beq.n	8005464 <HAL_RCC_OscConfig+0x12c>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d168      	bne.n	8005464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e24c      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800539e:	d106      	bne.n	80053ae <HAL_RCC_OscConfig+0x76>
 80053a0:	4b80      	ldr	r3, [pc, #512]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a7f      	ldr	r2, [pc, #508]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e02e      	b.n	800540c <HAL_RCC_OscConfig+0xd4>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCC_OscConfig+0x98>
 80053b6:	4b7b      	ldr	r3, [pc, #492]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a7a      	ldr	r2, [pc, #488]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	4b78      	ldr	r3, [pc, #480]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a77      	ldr	r2, [pc, #476]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e01d      	b.n	800540c <HAL_RCC_OscConfig+0xd4>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCC_OscConfig+0xbc>
 80053da:	4b72      	ldr	r3, [pc, #456]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a71      	ldr	r2, [pc, #452]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	4b6f      	ldr	r3, [pc, #444]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a6e      	ldr	r2, [pc, #440]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e00b      	b.n	800540c <HAL_RCC_OscConfig+0xd4>
 80053f4:	4b6b      	ldr	r3, [pc, #428]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a6a      	ldr	r2, [pc, #424]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80053fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	4b68      	ldr	r3, [pc, #416]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a67      	ldr	r2, [pc, #412]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800540a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d013      	beq.n	800543c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fd f9b0 	bl	8002778 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800541c:	f7fd f9ac 	bl	8002778 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b64      	cmp	r3, #100	@ 0x64
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e200      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	4b5d      	ldr	r3, [pc, #372]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0xe4>
 800543a:	e014      	b.n	8005466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fd f99c 	bl	8002778 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005444:	f7fd f998 	bl	8002778 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b64      	cmp	r3, #100	@ 0x64
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e1ec      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005456:	4b53      	ldr	r3, [pc, #332]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x10c>
 8005462:	e000      	b.n	8005466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d063      	beq.n	800553a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005472:	4b4c      	ldr	r3, [pc, #304]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800547e:	4b49      	ldr	r3, [pc, #292]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b08      	cmp	r3, #8
 8005488:	d11c      	bne.n	80054c4 <HAL_RCC_OscConfig+0x18c>
 800548a:	4b46      	ldr	r3, [pc, #280]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d116      	bne.n	80054c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005496:	4b43      	ldr	r3, [pc, #268]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_RCC_OscConfig+0x176>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d001      	beq.n	80054ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e1c0      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ae:	4b3d      	ldr	r3, [pc, #244]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4939      	ldr	r1, [pc, #228]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c2:	e03a      	b.n	800553a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054cc:	4b36      	ldr	r3, [pc, #216]	@ (80055a8 <HAL_RCC_OscConfig+0x270>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d2:	f7fd f951 	bl	8002778 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054da:	f7fd f94d 	bl	8002778 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e1a1      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ec:	4b2d      	ldr	r3, [pc, #180]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f0      	beq.n	80054da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f8:	4b2a      	ldr	r3, [pc, #168]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4927      	ldr	r1, [pc, #156]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	600b      	str	r3, [r1, #0]
 800550c:	e015      	b.n	800553a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800550e:	4b26      	ldr	r3, [pc, #152]	@ (80055a8 <HAL_RCC_OscConfig+0x270>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005514:	f7fd f930 	bl	8002778 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800551c:	f7fd f92c 	bl	8002778 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e180      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d03a      	beq.n	80055bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d019      	beq.n	8005582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554e:	4b17      	ldr	r3, [pc, #92]	@ (80055ac <HAL_RCC_OscConfig+0x274>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005554:	f7fd f910 	bl	8002778 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555c:	f7fd f90c 	bl	8002778 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e160      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	4b0d      	ldr	r3, [pc, #52]	@ (80055a4 <HAL_RCC_OscConfig+0x26c>)
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800557a:	2001      	movs	r0, #1
 800557c:	f000 face 	bl	8005b1c <RCC_Delay>
 8005580:	e01c      	b.n	80055bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005582:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <HAL_RCC_OscConfig+0x274>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005588:	f7fd f8f6 	bl	8002778 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800558e:	e00f      	b.n	80055b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005590:	f7fd f8f2 	bl	8002778 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d908      	bls.n	80055b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e146      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
 80055a2:	bf00      	nop
 80055a4:	40021000 	.word	0x40021000
 80055a8:	42420000 	.word	0x42420000
 80055ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b0:	4b92      	ldr	r3, [pc, #584]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e9      	bne.n	8005590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80a6 	beq.w	8005716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ce:	4b8b      	ldr	r3, [pc, #556]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10d      	bne.n	80055f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055da:	4b88      	ldr	r3, [pc, #544]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	4a87      	ldr	r2, [pc, #540]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055e4:	61d3      	str	r3, [r2, #28]
 80055e6:	4b85      	ldr	r3, [pc, #532]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ee:	60bb      	str	r3, [r7, #8]
 80055f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f2:	2301      	movs	r3, #1
 80055f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f6:	4b82      	ldr	r3, [pc, #520]	@ (8005800 <HAL_RCC_OscConfig+0x4c8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d118      	bne.n	8005634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005602:	4b7f      	ldr	r3, [pc, #508]	@ (8005800 <HAL_RCC_OscConfig+0x4c8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a7e      	ldr	r2, [pc, #504]	@ (8005800 <HAL_RCC_OscConfig+0x4c8>)
 8005608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800560c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560e:	f7fd f8b3 	bl	8002778 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005616:	f7fd f8af 	bl	8002778 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b64      	cmp	r3, #100	@ 0x64
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e103      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005628:	4b75      	ldr	r3, [pc, #468]	@ (8005800 <HAL_RCC_OscConfig+0x4c8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f0      	beq.n	8005616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d106      	bne.n	800564a <HAL_RCC_OscConfig+0x312>
 800563c:	4b6f      	ldr	r3, [pc, #444]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	4a6e      	ldr	r2, [pc, #440]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	6213      	str	r3, [r2, #32]
 8005648:	e02d      	b.n	80056a6 <HAL_RCC_OscConfig+0x36e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10c      	bne.n	800566c <HAL_RCC_OscConfig+0x334>
 8005652:	4b6a      	ldr	r3, [pc, #424]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	4a69      	ldr	r2, [pc, #420]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005658:	f023 0301 	bic.w	r3, r3, #1
 800565c:	6213      	str	r3, [r2, #32]
 800565e:	4b67      	ldr	r3, [pc, #412]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	4a66      	ldr	r2, [pc, #408]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005664:	f023 0304 	bic.w	r3, r3, #4
 8005668:	6213      	str	r3, [r2, #32]
 800566a:	e01c      	b.n	80056a6 <HAL_RCC_OscConfig+0x36e>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b05      	cmp	r3, #5
 8005672:	d10c      	bne.n	800568e <HAL_RCC_OscConfig+0x356>
 8005674:	4b61      	ldr	r3, [pc, #388]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	4a60      	ldr	r2, [pc, #384]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 800567a:	f043 0304 	orr.w	r3, r3, #4
 800567e:	6213      	str	r3, [r2, #32]
 8005680:	4b5e      	ldr	r3, [pc, #376]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	4a5d      	ldr	r2, [pc, #372]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6213      	str	r3, [r2, #32]
 800568c:	e00b      	b.n	80056a6 <HAL_RCC_OscConfig+0x36e>
 800568e:	4b5b      	ldr	r3, [pc, #364]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	4a5a      	ldr	r2, [pc, #360]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6213      	str	r3, [r2, #32]
 800569a:	4b58      	ldr	r3, [pc, #352]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	4a57      	ldr	r2, [pc, #348]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80056a0:	f023 0304 	bic.w	r3, r3, #4
 80056a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d015      	beq.n	80056da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ae:	f7fd f863 	bl	8002778 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b4:	e00a      	b.n	80056cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b6:	f7fd f85f 	bl	8002778 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e0b1      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056cc:	4b4b      	ldr	r3, [pc, #300]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0ee      	beq.n	80056b6 <HAL_RCC_OscConfig+0x37e>
 80056d8:	e014      	b.n	8005704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056da:	f7fd f84d 	bl	8002778 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e0:	e00a      	b.n	80056f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e2:	f7fd f849 	bl	8002778 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e09b      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f8:	4b40      	ldr	r3, [pc, #256]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ee      	bne.n	80056e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005704:	7dfb      	ldrb	r3, [r7, #23]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d105      	bne.n	8005716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800570a:	4b3c      	ldr	r3, [pc, #240]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4a3b      	ldr	r2, [pc, #236]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8087 	beq.w	800582e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005720:	4b36      	ldr	r3, [pc, #216]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f003 030c 	and.w	r3, r3, #12
 8005728:	2b08      	cmp	r3, #8
 800572a:	d061      	beq.n	80057f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d146      	bne.n	80057c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005734:	4b33      	ldr	r3, [pc, #204]	@ (8005804 <HAL_RCC_OscConfig+0x4cc>)
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573a:	f7fd f81d 	bl	8002778 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005742:	f7fd f819 	bl	8002778 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e06d      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005754:	4b29      	ldr	r3, [pc, #164]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f0      	bne.n	8005742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005768:	d108      	bne.n	800577c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800576a:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	4921      	ldr	r1, [pc, #132]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005778:	4313      	orrs	r3, r2
 800577a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800577c:	4b1f      	ldr	r3, [pc, #124]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a19      	ldr	r1, [r3, #32]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	430b      	orrs	r3, r1
 800578e:	491b      	ldr	r1, [pc, #108]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 8005790:	4313      	orrs	r3, r2
 8005792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005794:	4b1b      	ldr	r3, [pc, #108]	@ (8005804 <HAL_RCC_OscConfig+0x4cc>)
 8005796:	2201      	movs	r2, #1
 8005798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579a:	f7fc ffed 	bl	8002778 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a2:	f7fc ffe9 	bl	8002778 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e03d      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057b4:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCC_OscConfig+0x46a>
 80057c0:	e035      	b.n	800582e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c2:	4b10      	ldr	r3, [pc, #64]	@ (8005804 <HAL_RCC_OscConfig+0x4cc>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fc ffd6 	bl	8002778 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fc ffd2 	bl	8002778 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e026      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057e2:	4b06      	ldr	r3, [pc, #24]	@ (80057fc <HAL_RCC_OscConfig+0x4c4>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x498>
 80057ee:	e01e      	b.n	800582e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d107      	bne.n	8005808 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e019      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
 80057fc:	40021000 	.word	0x40021000
 8005800:	40007000 	.word	0x40007000
 8005804:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005808:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <HAL_RCC_OscConfig+0x500>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
 8005818:	429a      	cmp	r2, r3
 800581a:	d106      	bne.n	800582a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005826:	429a      	cmp	r2, r3
 8005828:	d001      	beq.n	800582e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	40021000 	.word	0x40021000

0800583c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0d0      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005850:	4b6a      	ldr	r3, [pc, #424]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d910      	bls.n	8005880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585e:	4b67      	ldr	r3, [pc, #412]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 0207 	bic.w	r2, r3, #7
 8005866:	4965      	ldr	r1, [pc, #404]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	4313      	orrs	r3, r2
 800586c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800586e:	4b63      	ldr	r3, [pc, #396]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0b8      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005898:	4b59      	ldr	r3, [pc, #356]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	4a58      	ldr	r2, [pc, #352]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 800589e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80058a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b0:	4b53      	ldr	r3, [pc, #332]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a52      	ldr	r2, [pc, #328]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80058ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058bc:	4b50      	ldr	r3, [pc, #320]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	494d      	ldr	r1, [pc, #308]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d040      	beq.n	800595c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d107      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e2:	4b47      	ldr	r3, [pc, #284]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d115      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e07f      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d107      	bne.n	800590a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fa:	4b41      	ldr	r3, [pc, #260]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e073      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e06b      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591a:	4b39      	ldr	r3, [pc, #228]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f023 0203 	bic.w	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	4936      	ldr	r1, [pc, #216]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	4313      	orrs	r3, r2
 800592a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800592c:	f7fc ff24 	bl	8002778 <HAL_GetTick>
 8005930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005932:	e00a      	b.n	800594a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005934:	f7fc ff20 	bl	8002778 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e053      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 020c 	and.w	r2, r3, #12
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	429a      	cmp	r2, r3
 800595a:	d1eb      	bne.n	8005934 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800595c:	4b27      	ldr	r3, [pc, #156]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d210      	bcs.n	800598c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b24      	ldr	r3, [pc, #144]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 0207 	bic.w	r2, r3, #7
 8005972:	4922      	ldr	r1, [pc, #136]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	4313      	orrs	r3, r2
 8005978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597a:	4b20      	ldr	r3, [pc, #128]	@ (80059fc <HAL_RCC_ClockConfig+0x1c0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d001      	beq.n	800598c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e032      	b.n	80059f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d008      	beq.n	80059aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005998:	4b19      	ldr	r3, [pc, #100]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	4916      	ldr	r1, [pc, #88]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d009      	beq.n	80059ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059b6:	4b12      	ldr	r3, [pc, #72]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	490e      	ldr	r1, [pc, #56]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ca:	f000 f821 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 80059ce:	4602      	mov	r2, r0
 80059d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <HAL_RCC_ClockConfig+0x1c4>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	091b      	lsrs	r3, r3, #4
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	490a      	ldr	r1, [pc, #40]	@ (8005a04 <HAL_RCC_ClockConfig+0x1c8>)
 80059dc:	5ccb      	ldrb	r3, [r1, r3]
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	4a09      	ldr	r2, [pc, #36]	@ (8005a08 <HAL_RCC_ClockConfig+0x1cc>)
 80059e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059e6:	4b09      	ldr	r3, [pc, #36]	@ (8005a0c <HAL_RCC_ClockConfig+0x1d0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fc fe82 	bl	80026f4 <HAL_InitTick>

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40022000 	.word	0x40022000
 8005a00:	40021000 	.word	0x40021000
 8005a04:	080081bc 	.word	0x080081bc
 8005a08:	200005e4 	.word	0x200005e4
 8005a0c:	200005e8 	.word	0x200005e8

08005a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	2300      	movs	r3, #0
 8005a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d002      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0x30>
 8005a3a:	2b08      	cmp	r3, #8
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCC_GetSysClockFreq+0x36>
 8005a3e:	e027      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a40:	4b19      	ldr	r3, [pc, #100]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a42:	613b      	str	r3, [r7, #16]
      break;
 8005a44:	e027      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	0c9b      	lsrs	r3, r3, #18
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	4a17      	ldr	r2, [pc, #92]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a50:	5cd3      	ldrb	r3, [r2, r3]
 8005a52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a5e:	4b11      	ldr	r3, [pc, #68]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	0c5b      	lsrs	r3, r3, #17
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a6a:	5cd3      	ldrb	r3, [r2, r3]
 8005a6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a72:	fb03 f202 	mul.w	r2, r3, r2
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	e004      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a0c      	ldr	r2, [pc, #48]	@ (8005ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	613b      	str	r3, [r7, #16]
      break;
 8005a8e:	e002      	b.n	8005a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a90:	4b05      	ldr	r3, [pc, #20]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a92:	613b      	str	r3, [r7, #16]
      break;
 8005a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a96:	693b      	ldr	r3, [r7, #16]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	007a1200 	.word	0x007a1200
 8005aac:	080081d4 	.word	0x080081d4
 8005ab0:	080081e4 	.word	0x080081e4
 8005ab4:	003d0900 	.word	0x003d0900

08005ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005abc:	4b02      	ldr	r3, [pc, #8]	@ (8005ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr
 8005ac8:	200005e4 	.word	0x200005e4

08005acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ad0:	f7ff fff2 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	4903      	ldr	r1, [pc, #12]	@ (8005af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40021000 	.word	0x40021000
 8005af0:	080081cc 	.word	0x080081cc

08005af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005af8:	f7ff ffde 	bl	8005ab8 <HAL_RCC_GetHCLKFreq>
 8005afc:	4602      	mov	r2, r0
 8005afe:	4b05      	ldr	r3, [pc, #20]	@ (8005b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	0adb      	lsrs	r3, r3, #11
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	4903      	ldr	r1, [pc, #12]	@ (8005b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0a:	5ccb      	ldrb	r3, [r1, r3]
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	40021000 	.word	0x40021000
 8005b18:	080081cc 	.word	0x080081cc

08005b1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b24:	4b0a      	ldr	r3, [pc, #40]	@ (8005b50 <RCC_Delay+0x34>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a0a      	ldr	r2, [pc, #40]	@ (8005b54 <RCC_Delay+0x38>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	0a5b      	lsrs	r3, r3, #9
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	fb02 f303 	mul.w	r3, r2, r3
 8005b36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b38:	bf00      	nop
  }
  while (Delay --);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1e5a      	subs	r2, r3, #1
 8005b3e:	60fa      	str	r2, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f9      	bne.n	8005b38 <RCC_Delay+0x1c>
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr
 8005b50:	200005e4 	.word	0x200005e4
 8005b54:	10624dd3 	.word	0x10624dd3

08005b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	2300      	movs	r3, #0
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d07d      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005b74:	2300      	movs	r3, #0
 8005b76:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b78:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10d      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b84:	4b4c      	ldr	r3, [pc, #304]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	4a4b      	ldr	r2, [pc, #300]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8e:	61d3      	str	r3, [r2, #28]
 8005b90:	4b49      	ldr	r3, [pc, #292]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba0:	4b46      	ldr	r3, [pc, #280]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d118      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bac:	4b43      	ldr	r3, [pc, #268]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a42      	ldr	r2, [pc, #264]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb8:	f7fc fdde 	bl	8002778 <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc0:	f7fc fdda 	bl	8002778 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b64      	cmp	r3, #100	@ 0x64
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e06d      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bde:	4b36      	ldr	r3, [pc, #216]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005be6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d02e      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d027      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c06:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c12:	4a29      	ldr	r2, [pc, #164]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d014      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c22:	f7fc fda9 	bl	8002778 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c28:	e00a      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2a:	f7fc fda5 	bl	8002778 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e036      	b.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c40:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ee      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4917      	ldr	r1, [pc, #92]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c5e:	7dfb      	ldrb	r3, [r7, #23]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d105      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c64:	4b14      	ldr	r3, [pc, #80]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	4a13      	ldr	r2, [pc, #76]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d008      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	490b      	ldr	r1, [pc, #44]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c9a:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	4904      	ldr	r1, [pc, #16]	@ (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	40007000 	.word	0x40007000
 8005cc0:	42420440 	.word	0x42420440

08005cc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b10      	cmp	r3, #16
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	f200 808a 	bhi.w	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d045      	beq.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d075      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005cfa:	e082      	b.n	8005e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005cfc:	4b46      	ldr	r3, [pc, #280]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005d02:	4b45      	ldr	r3, [pc, #276]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d07b      	beq.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	0c9b      	lsrs	r3, r3, #18
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	4a41      	ldr	r2, [pc, #260]	@ (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005d18:	5cd3      	ldrb	r3, [r2, r3]
 8005d1a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d015      	beq.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d26:	4b3c      	ldr	r3, [pc, #240]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	0c5b      	lsrs	r3, r3, #17
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	4a3b      	ldr	r2, [pc, #236]	@ (8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005d32:	5cd3      	ldrb	r3, [r2, r3]
 8005d34:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005d40:	4a38      	ldr	r2, [pc, #224]	@ (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	e004      	b.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4a34      	ldr	r2, [pc, #208]	@ (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005d56:	fb02 f303 	mul.w	r3, r2, r3
 8005d5a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d68:	d102      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	61bb      	str	r3, [r7, #24]
      break;
 8005d6e:	e04a      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	4a2d      	ldr	r2, [pc, #180]	@ (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	61bb      	str	r3, [r7, #24]
      break;
 8005d7e:	e042      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005d80:	4b25      	ldr	r3, [pc, #148]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d90:	d108      	bne.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	e01f      	b.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dae:	d109      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005db0:	4b19      	ldr	r3, [pc, #100]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005dbc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	e00f      	b.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dce:	d11c      	bne.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005dd0:	4b11      	ldr	r3, [pc, #68]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d016      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005ddc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005de0:	61bb      	str	r3, [r7, #24]
      break;
 8005de2:	e012      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005de4:	e011      	b.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005de6:	f7ff fe85 	bl	8005af4 <HAL_RCC_GetPCLK2Freq>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b0a      	ldr	r3, [pc, #40]	@ (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	0b9b      	lsrs	r3, r3, #14
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	3301      	adds	r3, #1
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	61bb      	str	r3, [r7, #24]
      break;
 8005e00:	e004      	b.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e02:	bf00      	nop
 8005e04:	e002      	b.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005e0a:	bf00      	nop
    }
  }
  return (frequency);
 8005e0c:	69bb      	ldr	r3, [r7, #24]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	080081e8 	.word	0x080081e8
 8005e20:	080081f8 	.word	0x080081f8
 8005e24:	007a1200 	.word	0x007a1200
 8005e28:	003d0900 	.word	0x003d0900
 8005e2c:	aaaaaaab 	.word	0xaaaaaaab

08005e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e041      	b.n	8005ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fc fab0 	bl	80023bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f000 fc62 	bl	8006738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d001      	beq.n	8005ee8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e032      	b.n	8005f4e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a18      	ldr	r2, [pc, #96]	@ (8005f58 <HAL_TIM_Base_Start+0x88>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_TIM_Base_Start+0x48>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f02:	d009      	beq.n	8005f18 <HAL_TIM_Base_Start+0x48>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a14      	ldr	r2, [pc, #80]	@ (8005f5c <HAL_TIM_Base_Start+0x8c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_TIM_Base_Start+0x48>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a13      	ldr	r2, [pc, #76]	@ (8005f60 <HAL_TIM_Base_Start+0x90>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d111      	bne.n	8005f3c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d010      	beq.n	8005f4c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3a:	e007      	b.n	8005f4c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	40000800 	.word	0x40000800

08005f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d001      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e03a      	b.n	8005ff2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a18      	ldr	r2, [pc, #96]	@ (8005ffc <HAL_TIM_Base_Start_IT+0x98>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00e      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x58>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	d009      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x58>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a14      	ldr	r2, [pc, #80]	@ (8006000 <HAL_TIM_Base_Start_IT+0x9c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d004      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x58>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a13      	ldr	r2, [pc, #76]	@ (8006004 <HAL_TIM_Base_Start_IT+0xa0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d111      	bne.n	8005fe0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2b06      	cmp	r3, #6
 8005fcc:	d010      	beq.n	8005ff0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f042 0201 	orr.w	r2, r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fde:	e007      	b.n	8005ff0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bc80      	pop	{r7}
 8005ffa:	4770      	bx	lr
 8005ffc:	40012c00 	.word	0x40012c00
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800

08006008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e041      	b.n	800609e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f839 	bl	80060a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f000 fb76 	bl	8006738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d109      	bne.n	80060dc <HAL_TIM_PWM_Start+0x24>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	bf14      	ite	ne
 80060d4:	2301      	movne	r3, #1
 80060d6:	2300      	moveq	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	e022      	b.n	8006122 <HAL_TIM_PWM_Start+0x6a>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b04      	cmp	r3, #4
 80060e0:	d109      	bne.n	80060f6 <HAL_TIM_PWM_Start+0x3e>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	bf14      	ite	ne
 80060ee:	2301      	movne	r3, #1
 80060f0:	2300      	moveq	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	e015      	b.n	8006122 <HAL_TIM_PWM_Start+0x6a>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d109      	bne.n	8006110 <HAL_TIM_PWM_Start+0x58>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	e008      	b.n	8006122 <HAL_TIM_PWM_Start+0x6a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b01      	cmp	r3, #1
 800611a:	bf14      	ite	ne
 800611c:	2301      	movne	r3, #1
 800611e:	2300      	moveq	r3, #0
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e05e      	b.n	80061e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d104      	bne.n	800613a <HAL_TIM_PWM_Start+0x82>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006138:	e013      	b.n	8006162 <HAL_TIM_PWM_Start+0xaa>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b04      	cmp	r3, #4
 800613e:	d104      	bne.n	800614a <HAL_TIM_PWM_Start+0x92>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006148:	e00b      	b.n	8006162 <HAL_TIM_PWM_Start+0xaa>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b08      	cmp	r3, #8
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Start+0xa2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006158:	e003      	b.n	8006162 <HAL_TIM_PWM_Start+0xaa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2201      	movs	r2, #1
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fd70 	bl	8006c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1e      	ldr	r2, [pc, #120]	@ (80061f0 <HAL_TIM_PWM_Start+0x138>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d107      	bne.n	800618a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006188:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a18      	ldr	r2, [pc, #96]	@ (80061f0 <HAL_TIM_PWM_Start+0x138>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d00e      	beq.n	80061b2 <HAL_TIM_PWM_Start+0xfa>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619c:	d009      	beq.n	80061b2 <HAL_TIM_PWM_Start+0xfa>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a14      	ldr	r2, [pc, #80]	@ (80061f4 <HAL_TIM_PWM_Start+0x13c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d004      	beq.n	80061b2 <HAL_TIM_PWM_Start+0xfa>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a12      	ldr	r2, [pc, #72]	@ (80061f8 <HAL_TIM_PWM_Start+0x140>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d111      	bne.n	80061d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b06      	cmp	r3, #6
 80061c2:	d010      	beq.n	80061e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d4:	e007      	b.n	80061e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40012c00 	.word	0x40012c00
 80061f4:	40000400 	.word	0x40000400
 80061f8:	40000800 	.word	0x40000800

080061fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d020      	beq.n	8006260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01b      	beq.n	8006260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0202 	mvn.w	r2, #2
 8006230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa5a 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa4d 	bl	80066ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fa5c 	bl	8006712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d020      	beq.n	80062ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d01b      	beq.n	80062ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0204 	mvn.w	r2, #4
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa34 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa27 	bl	80066ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa36 	bl	8006712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f003 0308 	and.w	r3, r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d020      	beq.n	80062f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d01b      	beq.n	80062f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0208 	mvn.w	r2, #8
 80062c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2204      	movs	r2, #4
 80062ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa0e 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 80062e4:	e005      	b.n	80062f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa01 	bl	80066ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fa10 	bl	8006712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d020      	beq.n	8006344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01b      	beq.n	8006344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f06f 0210 	mvn.w	r2, #16
 8006314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2208      	movs	r2, #8
 800631a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f9e8 	bl	8006700 <HAL_TIM_IC_CaptureCallback>
 8006330:	e005      	b.n	800633e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9db 	bl	80066ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f9ea 	bl	8006712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00c      	beq.n	8006368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d007      	beq.n	8006368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0201 	mvn.w	r2, #1
 8006360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fa fe0e 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00c      	beq.n	800638c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fced 	bl	8006d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00c      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800639c:	2b00      	cmp	r3, #0
 800639e:	d007      	beq.n	80063b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f9ba 	bl	8006724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00c      	beq.n	80063d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d007      	beq.n	80063d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0220 	mvn.w	r2, #32
 80063cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fcc0 	bl	8006d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e0ae      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b0c      	cmp	r3, #12
 8006406:	f200 809f 	bhi.w	8006548 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006445 	.word	0x08006445
 8006414:	08006549 	.word	0x08006549
 8006418:	08006549 	.word	0x08006549
 800641c:	08006549 	.word	0x08006549
 8006420:	08006485 	.word	0x08006485
 8006424:	08006549 	.word	0x08006549
 8006428:	08006549 	.word	0x08006549
 800642c:	08006549 	.word	0x08006549
 8006430:	080064c7 	.word	0x080064c7
 8006434:	08006549 	.word	0x08006549
 8006438:	08006549 	.word	0x08006549
 800643c:	08006549 	.word	0x08006549
 8006440:	08006507 	.word	0x08006507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f9e2 	bl	8006814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0208 	orr.w	r2, r2, #8
 800645e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0204 	bic.w	r2, r2, #4
 800646e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6999      	ldr	r1, [r3, #24]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	619a      	str	r2, [r3, #24]
      break;
 8006482:	e064      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fa28 	bl	80068e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800649e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6999      	ldr	r1, [r3, #24]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	619a      	str	r2, [r3, #24]
      break;
 80064c4:	e043      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fa71 	bl	80069b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0208 	orr.w	r2, r2, #8
 80064e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0204 	bic.w	r2, r2, #4
 80064f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69d9      	ldr	r1, [r3, #28]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	61da      	str	r2, [r3, #28]
      break;
 8006504:	e023      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fabb 	bl	8006a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69d9      	ldr	r1, [r3, #28]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	021a      	lsls	r2, r3, #8
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	61da      	str	r2, [r3, #28]
      break;
 8006546:	e002      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]
      break;
 800654c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_TIM_ConfigClockSource+0x1c>
 8006578:	2302      	movs	r3, #2
 800657a:	e0b4      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x186>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800659a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065b4:	d03e      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0xd4>
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065ba:	f200 8087 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c2:	f000 8086 	beq.w	80066d2 <HAL_TIM_ConfigClockSource+0x172>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065ca:	d87f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b70      	cmp	r3, #112	@ 0x70
 80065ce:	d01a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0xa6>
 80065d0:	2b70      	cmp	r3, #112	@ 0x70
 80065d2:	d87b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b60      	cmp	r3, #96	@ 0x60
 80065d6:	d050      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x11a>
 80065d8:	2b60      	cmp	r3, #96	@ 0x60
 80065da:	d877      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065dc:	2b50      	cmp	r3, #80	@ 0x50
 80065de:	d03c      	beq.n	800665a <HAL_TIM_ConfigClockSource+0xfa>
 80065e0:	2b50      	cmp	r3, #80	@ 0x50
 80065e2:	d873      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065e4:	2b40      	cmp	r3, #64	@ 0x40
 80065e6:	d058      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x13a>
 80065e8:	2b40      	cmp	r3, #64	@ 0x40
 80065ea:	d86f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065ec:	2b30      	cmp	r3, #48	@ 0x30
 80065ee:	d064      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 80065f0:	2b30      	cmp	r3, #48	@ 0x30
 80065f2:	d86b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d060      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d867      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d05a      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 8006604:	e062      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006616:	f000 fafc 	bl	8006c12 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
      break;
 8006632:	e04f      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006644:	f000 fae5 	bl	8006c12 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006656:	609a      	str	r2, [r3, #8]
      break;
 8006658:	e03c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	461a      	mov	r2, r3
 8006668:	f000 fa5c 	bl	8006b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2150      	movs	r1, #80	@ 0x50
 8006672:	4618      	mov	r0, r3
 8006674:	f000 fab3 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 8006678:	e02c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006686:	461a      	mov	r2, r3
 8006688:	f000 fa7a 	bl	8006b80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2160      	movs	r1, #96	@ 0x60
 8006692:	4618      	mov	r0, r3
 8006694:	f000 faa3 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 8006698:	e01c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 fa3c 	bl	8006b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2140      	movs	r1, #64	@ 0x40
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fa93 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 80066b8:	e00c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f000 fa8a 	bl	8006bde <TIM_ITRx_SetConfig>
      break;
 80066ca:	e003      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e000      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr

08006712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr
	...

08006738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a2f      	ldr	r2, [pc, #188]	@ (8006808 <TIM_Base_SetConfig+0xd0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00b      	beq.n	8006768 <TIM_Base_SetConfig+0x30>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006756:	d007      	beq.n	8006768 <TIM_Base_SetConfig+0x30>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a2c      	ldr	r2, [pc, #176]	@ (800680c <TIM_Base_SetConfig+0xd4>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d003      	beq.n	8006768 <TIM_Base_SetConfig+0x30>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a2b      	ldr	r2, [pc, #172]	@ (8006810 <TIM_Base_SetConfig+0xd8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a22      	ldr	r2, [pc, #136]	@ (8006808 <TIM_Base_SetConfig+0xd0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_Base_SetConfig+0x62>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006788:	d007      	beq.n	800679a <TIM_Base_SetConfig+0x62>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1f      	ldr	r2, [pc, #124]	@ (800680c <TIM_Base_SetConfig+0xd4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_Base_SetConfig+0x62>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a1e      	ldr	r2, [pc, #120]	@ (8006810 <TIM_Base_SetConfig+0xd8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d108      	bne.n	80067ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006808 <TIM_Base_SetConfig+0xd0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d103      	bne.n	80067e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f023 0201 	bic.w	r2, r3, #1
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	611a      	str	r2, [r3, #16]
  }
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800

08006814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f023 0201 	bic.w	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0303 	bic.w	r3, r3, #3
 800684a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f023 0302 	bic.w	r3, r3, #2
 800685c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a1c      	ldr	r2, [pc, #112]	@ (80068dc <TIM_OC1_SetConfig+0xc8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d10c      	bne.n	800688a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f023 0308 	bic.w	r3, r3, #8
 8006876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f023 0304 	bic.w	r3, r3, #4
 8006888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a13      	ldr	r2, [pc, #76]	@ (80068dc <TIM_OC1_SetConfig+0xc8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d111      	bne.n	80068b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	621a      	str	r2, [r3, #32]
}
 80068d0:	bf00      	nop
 80068d2:	371c      	adds	r7, #28
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40012c00 	.word	0x40012c00

080068e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	f023 0210 	bic.w	r2, r3, #16
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f023 0320 	bic.w	r3, r3, #32
 800692a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	011b      	lsls	r3, r3, #4
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a1d      	ldr	r2, [pc, #116]	@ (80069b0 <TIM_OC2_SetConfig+0xd0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10d      	bne.n	800695c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800695a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a14      	ldr	r2, [pc, #80]	@ (80069b0 <TIM_OC2_SetConfig+0xd0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d113      	bne.n	800698c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800696a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bc80      	pop	{r7}
 80069ae:	4770      	bx	lr
 80069b0:	40012c00 	.word	0x40012c00

080069b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8006a84 <TIM_OC3_SetConfig+0xd0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d10d      	bne.n	8006a2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	021b      	lsls	r3, r3, #8
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a14      	ldr	r2, [pc, #80]	@ (8006a84 <TIM_OC3_SetConfig+0xd0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d113      	bne.n	8006a5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	621a      	str	r2, [r3, #32]
}
 8006a78:	bf00      	nop
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40012c00 	.word	0x40012c00

08006a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	031b      	lsls	r3, r3, #12
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8006b20 <TIM_OC4_SetConfig+0x98>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d109      	bne.n	8006afc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	019b      	lsls	r3, r3, #6
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr
 8006b20:	40012c00 	.word	0x40012c00

08006b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f023 0201 	bic.w	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 030a 	bic.w	r3, r3, #10
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	621a      	str	r2, [r3, #32]
}
 8006b76:	bf00      	nop
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bc80      	pop	{r7}
 8006b7e:	4770      	bx	lr

08006b80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1b      	ldr	r3, [r3, #32]
 8006b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	f023 0210 	bic.w	r2, r3, #16
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	031b      	lsls	r3, r3, #12
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	621a      	str	r2, [r3, #32]
}
 8006bd4:	bf00      	nop
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bc80      	pop	{r7}
 8006bdc:	4770      	bx	lr

08006bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f043 0307 	orr.w	r3, r3, #7
 8006c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	609a      	str	r2, [r3, #8]
}
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bc80      	pop	{r7}
 8006c10:	4770      	bx	lr

08006c12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b087      	sub	sp, #28
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
 8006c1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	021a      	lsls	r2, r3, #8
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	609a      	str	r2, [r3, #8]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	2201      	movs	r2, #1
 8006c64:	fa02 f303 	lsl.w	r3, r2, r3
 8006c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1a      	ldr	r2, [r3, #32]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	401a      	ands	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1a      	ldr	r2, [r3, #32]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f003 031f 	and.w	r3, r3, #31
 8006c82:	6879      	ldr	r1, [r7, #4]
 8006c84:	fa01 f303 	lsl.w	r3, r1, r3
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	621a      	str	r2, [r3, #32]
}
 8006c8e:	bf00      	nop
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e046      	b.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a16      	ldr	r2, [pc, #88]	@ (8006d48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d00e      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfc:	d009      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a12      	ldr	r2, [pc, #72]	@ (8006d4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a10      	ldr	r2, [pc, #64]	@ (8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d10c      	bne.n	8006d2c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40000400 	.word	0x40000400
 8006d50:	40000800 	.word	0x40000800

08006d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d5c:	bf00      	nop
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d6e:	bf00      	nop
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e042      	b.n	8006e10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7fb fb88 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	@ 0x24
 8006da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fcab 	bl	8007718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	691a      	ldr	r2, [r3, #16]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	695a      	ldr	r2, [r3, #20]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	4613      	mov	r3, r2
 8006e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d121      	bne.n	8006e76 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_UART_Transmit_IT+0x26>
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e01a      	b.n	8006e78 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	88fa      	ldrh	r2, [r7, #6]
 8006e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	88fa      	ldrh	r2, [r7, #6]
 8006e52:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2221      	movs	r2, #33	@ 0x21
 8006e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e70:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e000      	b.n	8006e78 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006e76:	2302      	movs	r3, #2
  }
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr
	...

08006e84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b0ba      	sub	sp, #232	@ 0xe8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10f      	bne.n	8006eea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d009      	beq.n	8006eea <HAL_UART_IRQHandler+0x66>
 8006ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eda:	f003 0320 	and.w	r3, r3, #32
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb5a 	bl	800759c <UART_Receive_IT>
      return;
 8006ee8:	e25b      	b.n	80073a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006eea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80de 	beq.w	80070b0 <HAL_UART_IRQHandler+0x22c>
 8006ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d106      	bne.n	8006f0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80d1 	beq.w	80070b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00b      	beq.n	8006f32 <HAL_UART_IRQHandler+0xae>
 8006f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d005      	beq.n	8006f32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f2a:	f043 0201 	orr.w	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00b      	beq.n	8006f56 <HAL_UART_IRQHandler+0xd2>
 8006f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4e:	f043 0202 	orr.w	r2, r3, #2
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <HAL_UART_IRQHandler+0xf6>
 8006f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f72:	f043 0204 	orr.w	r2, r3, #4
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d011      	beq.n	8006faa <HAL_UART_IRQHandler+0x126>
 8006f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d105      	bne.n	8006f9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa2:	f043 0208 	orr.w	r2, r3, #8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 81f2 	beq.w	8007398 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x14e>
 8006fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc4:	f003 0320 	and.w	r3, r3, #32
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fae5 	bl	800759c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	bf14      	ite	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	2300      	moveq	r3, #0
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fee:	f003 0308 	and.w	r3, r3, #8
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d103      	bne.n	8006ffe <HAL_UART_IRQHandler+0x17a>
 8006ff6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d04f      	beq.n	800709e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f9ef 	bl	80073e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d041      	beq.n	8007096 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3314      	adds	r3, #20
 8007018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007028:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800702c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800703e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007042:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800704a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1d9      	bne.n	8007012 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d013      	beq.n	800708e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706a:	4a7e      	ldr	r2, [pc, #504]	@ (8007264 <HAL_UART_IRQHandler+0x3e0>)
 800706c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007072:	4618      	mov	r0, r3
 8007074:	f7fc f980 	bl	8003378 <HAL_DMA_Abort_IT>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d016      	beq.n	80070ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007088:	4610      	mov	r0, r2
 800708a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	e00e      	b.n	80070ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f993 	bl	80073ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	e00a      	b.n	80070ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f98f 	bl	80073ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800709c:	e006      	b.n	80070ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f98b 	bl	80073ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80070aa:	e175      	b.n	8007398 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ac:	bf00      	nop
    return;
 80070ae:	e173      	b.n	8007398 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f040 814f 	bne.w	8007358 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 8148 	beq.w	8007358 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8141 	beq.w	8007358 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	60bb      	str	r3, [r7, #8]
 80070ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80b6 	beq.w	8007268 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007108:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 8145 	beq.w	800739c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800711a:	429a      	cmp	r2, r3
 800711c:	f080 813e 	bcs.w	800739c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007126:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	2b20      	cmp	r3, #32
 8007130:	f000 8088 	beq.w	8007244 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800714a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800714e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007160:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800716c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1d9      	bne.n	8007134 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3314      	adds	r3, #20
 8007186:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007192:	f023 0301 	bic.w	r3, r3, #1
 8007196:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3314      	adds	r3, #20
 80071a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80071a4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e1      	bne.n	8007180 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e3      	bne.n	80071bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	330c      	adds	r3, #12
 8007208:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007212:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007214:	f023 0310 	bic.w	r3, r3, #16
 8007218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	330c      	adds	r3, #12
 8007222:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007226:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007228:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800722c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e3      	bne.n	8007202 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723e:	4618      	mov	r0, r3
 8007240:	f7fc f85f 	bl	8003302 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007252:	b29b      	uxth	r3, r3
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	b29b      	uxth	r3, r3
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8b6 	bl	80073cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007260:	e09c      	b.n	800739c <HAL_UART_IRQHandler+0x518>
 8007262:	bf00      	nop
 8007264:	080074a7 	.word	0x080074a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007270:	b29b      	uxth	r3, r3
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800727c:	b29b      	uxth	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 808e 	beq.w	80073a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8089 	beq.w	80073a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	330c      	adds	r3, #12
 8007294:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800729e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	330c      	adds	r3, #12
 80072ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80072b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e3      	bne.n	800728e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3314      	adds	r3, #20
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	e853 3f00 	ldrex	r3, [r3]
 80072d4:	623b      	str	r3, [r7, #32]
   return(result);
 80072d6:	6a3b      	ldr	r3, [r7, #32]
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3314      	adds	r3, #20
 80072e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e3      	bne.n	80072c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	60fb      	str	r3, [r7, #12]
   return(result);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0310 	bic.w	r3, r3, #16
 8007322:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007330:	61fa      	str	r2, [r7, #28]
 8007332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	69b9      	ldr	r1, [r7, #24]
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	617b      	str	r3, [r7, #20]
   return(result);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e3      	bne.n	800730c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800734a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f83b 	bl	80073cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007356:	e023      	b.n	80073a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800735c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007360:	2b00      	cmp	r3, #0
 8007362:	d009      	beq.n	8007378 <HAL_UART_IRQHandler+0x4f4>
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8ac 	bl	80074ce <UART_Transmit_IT>
    return;
 8007376:	e014      	b.n	80073a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800737c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00e      	beq.n	80073a2 <HAL_UART_IRQHandler+0x51e>
 8007384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d008      	beq.n	80073a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f8eb 	bl	800756c <UART_EndTransmit_IT>
    return;
 8007396:	e004      	b.n	80073a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8007398:	bf00      	nop
 800739a:	e002      	b.n	80073a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800739c:	bf00      	nop
 800739e:	e000      	b.n	80073a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80073a0:	bf00      	nop
  }
}
 80073a2:	37e8      	adds	r7, #232	@ 0xe8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bc80      	pop	{r7}
 80073b8:	4770      	bx	lr

080073ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	bc80      	pop	{r7}
 80073e0:	4770      	bx	lr

080073e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b095      	sub	sp, #84	@ 0x54
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330c      	adds	r3, #12
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	330c      	adds	r3, #12
 8007408:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800740a:	643a      	str	r2, [r7, #64]	@ 0x40
 800740c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e5      	bne.n	80073ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	3314      	adds	r3, #20
 8007424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	61fb      	str	r3, [r7, #28]
   return(result);
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3314      	adds	r3, #20
 800743c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800743e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007444:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1e5      	bne.n	800741e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007456:	2b01      	cmp	r3, #1
 8007458:	d119      	bne.n	800748e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	330c      	adds	r3, #12
 8007460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	e853 3f00 	ldrex	r3, [r3]
 8007468:	60bb      	str	r3, [r7, #8]
   return(result);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f023 0310 	bic.w	r3, r3, #16
 8007470:	647b      	str	r3, [r7, #68]	@ 0x44
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	330c      	adds	r3, #12
 8007478:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800747a:	61ba      	str	r2, [r7, #24]
 800747c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	e841 2300 	strex	r3, r2, [r1]
 8007486:	613b      	str	r3, [r7, #16]
   return(result);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1e5      	bne.n	800745a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800749c:	bf00      	nop
 800749e:	3754      	adds	r7, #84	@ 0x54
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bc80      	pop	{r7}
 80074a4:	4770      	bx	lr

080074a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f7ff ff7a 	bl	80073ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b21      	cmp	r3, #33	@ 0x21
 80074e0:	d13e      	bne.n	8007560 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074ea:	d114      	bne.n	8007516 <UART_Transmit_IT+0x48>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d110      	bne.n	8007516 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007508:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	1c9a      	adds	r2, r3, #2
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	621a      	str	r2, [r3, #32]
 8007514:	e008      	b.n	8007528 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	1c59      	adds	r1, r3, #1
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6211      	str	r1, [r2, #32]
 8007520:	781a      	ldrb	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800752c:	b29b      	uxth	r3, r3
 800752e:	3b01      	subs	r3, #1
 8007530:	b29b      	uxth	r3, r3
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	4619      	mov	r1, r3
 8007536:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10f      	bne.n	800755c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800754a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800755a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	e000      	b.n	8007562 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007560:	2302      	movs	r3, #2
  }
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	bc80      	pop	{r7}
 800756a:	4770      	bx	lr

0800756c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007582:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7f9 fd2b 	bl	8000fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b08c      	sub	sp, #48	@ 0x30
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b22      	cmp	r3, #34	@ 0x22
 80075ae:	f040 80ae 	bne.w	800770e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ba:	d117      	bne.n	80075ec <UART_Receive_IT+0x50>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d113      	bne.n	80075ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075c4:	2300      	movs	r3, #0
 80075c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075da:	b29a      	uxth	r2, r3
 80075dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	1c9a      	adds	r2, r3, #2
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80075ea:	e026      	b.n	800763a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075fe:	d007      	beq.n	8007610 <UART_Receive_IT+0x74>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10a      	bne.n	800761e <UART_Receive_IT+0x82>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	b2da      	uxtb	r2, r3
 8007618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761a:	701a      	strb	r2, [r3, #0]
 800761c:	e008      	b.n	8007630 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800762a:	b2da      	uxtb	r2, r3
 800762c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800762e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29b      	uxth	r3, r3
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4619      	mov	r1, r3
 8007648:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800764a:	2b00      	cmp	r3, #0
 800764c:	d15d      	bne.n	800770a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0220 	bic.w	r2, r2, #32
 800765c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800766c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 0201 	bic.w	r2, r2, #1
 800767c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007690:	2b01      	cmp	r3, #1
 8007692:	d135      	bne.n	8007700 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	330c      	adds	r3, #12
 80076a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	613b      	str	r3, [r7, #16]
   return(result);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f023 0310 	bic.w	r3, r3, #16
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ba:	623a      	str	r2, [r7, #32]
 80076bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	69f9      	ldr	r1, [r7, #28]
 80076c0:	6a3a      	ldr	r2, [r7, #32]
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e5      	bne.n	800769a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0310 	and.w	r3, r3, #16
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d10a      	bne.n	80076f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076dc:	2300      	movs	r3, #0
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fe67 	bl	80073cc <HAL_UARTEx_RxEventCallback>
 80076fe:	e002      	b.n	8007706 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fe51 	bl	80073a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e002      	b.n	8007710 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	e000      	b.n	8007710 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800770e:	2302      	movs	r3, #2
  }
}
 8007710:	4618      	mov	r0, r3
 8007712:	3730      	adds	r7, #48	@ 0x30
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	4313      	orrs	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007752:	f023 030c 	bic.w	r3, r3, #12
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	430b      	orrs	r3, r1
 800775e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a2c      	ldr	r2, [pc, #176]	@ (800782c <UART_SetConfig+0x114>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d103      	bne.n	8007788 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007780:	f7fe f9b8 	bl	8005af4 <HAL_RCC_GetPCLK2Freq>
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	e002      	b.n	800778e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007788:	f7fe f9a0 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 800778c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009a      	lsls	r2, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a4:	4a22      	ldr	r2, [pc, #136]	@ (8007830 <UART_SetConfig+0x118>)
 80077a6:	fba2 2303 	umull	r2, r3, r2, r3
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	0119      	lsls	r1, r3, #4
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009a      	lsls	r2, r3, #2
 80077b8:	441a      	add	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80077c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007830 <UART_SetConfig+0x118>)
 80077c6:	fba3 0302 	umull	r0, r3, r3, r2
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	2064      	movs	r0, #100	@ 0x64
 80077ce:	fb00 f303 	mul.w	r3, r0, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	3332      	adds	r3, #50	@ 0x32
 80077d8:	4a15      	ldr	r2, [pc, #84]	@ (8007830 <UART_SetConfig+0x118>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077e4:	4419      	add	r1, r3
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009a      	lsls	r2, r3, #2
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80077fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007830 <UART_SetConfig+0x118>)
 80077fe:	fba3 0302 	umull	r0, r3, r3, r2
 8007802:	095b      	lsrs	r3, r3, #5
 8007804:	2064      	movs	r0, #100	@ 0x64
 8007806:	fb00 f303 	mul.w	r3, r0, r3
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	3332      	adds	r3, #50	@ 0x32
 8007810:	4a07      	ldr	r2, [pc, #28]	@ (8007830 <UART_SetConfig+0x118>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f003 020f 	and.w	r2, r3, #15
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	440a      	add	r2, r1
 8007822:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007824:	bf00      	nop
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40013800 	.word	0x40013800
 8007830:	51eb851f 	.word	0x51eb851f

08007834 <siprintf>:
 8007834:	b40e      	push	{r1, r2, r3}
 8007836:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800783a:	b500      	push	{lr}
 800783c:	b09c      	sub	sp, #112	@ 0x70
 800783e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007840:	9002      	str	r0, [sp, #8]
 8007842:	9006      	str	r0, [sp, #24]
 8007844:	9107      	str	r1, [sp, #28]
 8007846:	9104      	str	r1, [sp, #16]
 8007848:	4808      	ldr	r0, [pc, #32]	@ (800786c <siprintf+0x38>)
 800784a:	4909      	ldr	r1, [pc, #36]	@ (8007870 <siprintf+0x3c>)
 800784c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007850:	9105      	str	r1, [sp, #20]
 8007852:	6800      	ldr	r0, [r0, #0]
 8007854:	a902      	add	r1, sp, #8
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	f000 f992 	bl	8007b80 <_svfiprintf_r>
 800785c:	2200      	movs	r2, #0
 800785e:	9b02      	ldr	r3, [sp, #8]
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	b01c      	add	sp, #112	@ 0x70
 8007864:	f85d eb04 	ldr.w	lr, [sp], #4
 8007868:	b003      	add	sp, #12
 800786a:	4770      	bx	lr
 800786c:	200005f0 	.word	0x200005f0
 8007870:	ffff0208 	.word	0xffff0208

08007874 <memset>:
 8007874:	4603      	mov	r3, r0
 8007876:	4402      	add	r2, r0
 8007878:	4293      	cmp	r3, r2
 800787a:	d100      	bne.n	800787e <memset+0xa>
 800787c:	4770      	bx	lr
 800787e:	f803 1b01 	strb.w	r1, [r3], #1
 8007882:	e7f9      	b.n	8007878 <memset+0x4>

08007884 <__errno>:
 8007884:	4b01      	ldr	r3, [pc, #4]	@ (800788c <__errno+0x8>)
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200005f0 	.word	0x200005f0

08007890 <__libc_init_array>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	2600      	movs	r6, #0
 8007894:	4d0c      	ldr	r5, [pc, #48]	@ (80078c8 <__libc_init_array+0x38>)
 8007896:	4c0d      	ldr	r4, [pc, #52]	@ (80078cc <__libc_init_array+0x3c>)
 8007898:	1b64      	subs	r4, r4, r5
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	42a6      	cmp	r6, r4
 800789e:	d109      	bne.n	80078b4 <__libc_init_array+0x24>
 80078a0:	f000 fc78 	bl	8008194 <_init>
 80078a4:	2600      	movs	r6, #0
 80078a6:	4d0a      	ldr	r5, [pc, #40]	@ (80078d0 <__libc_init_array+0x40>)
 80078a8:	4c0a      	ldr	r4, [pc, #40]	@ (80078d4 <__libc_init_array+0x44>)
 80078aa:	1b64      	subs	r4, r4, r5
 80078ac:	10a4      	asrs	r4, r4, #2
 80078ae:	42a6      	cmp	r6, r4
 80078b0:	d105      	bne.n	80078be <__libc_init_array+0x2e>
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b8:	4798      	blx	r3
 80078ba:	3601      	adds	r6, #1
 80078bc:	e7ee      	b.n	800789c <__libc_init_array+0xc>
 80078be:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c2:	4798      	blx	r3
 80078c4:	3601      	adds	r6, #1
 80078c6:	e7f2      	b.n	80078ae <__libc_init_array+0x1e>
 80078c8:	08008230 	.word	0x08008230
 80078cc:	08008230 	.word	0x08008230
 80078d0:	08008230 	.word	0x08008230
 80078d4:	08008234 	.word	0x08008234

080078d8 <__retarget_lock_acquire_recursive>:
 80078d8:	4770      	bx	lr

080078da <__retarget_lock_release_recursive>:
 80078da:	4770      	bx	lr

080078dc <_free_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4605      	mov	r5, r0
 80078e0:	2900      	cmp	r1, #0
 80078e2:	d040      	beq.n	8007966 <_free_r+0x8a>
 80078e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e8:	1f0c      	subs	r4, r1, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bfb8      	it	lt
 80078ee:	18e4      	addlt	r4, r4, r3
 80078f0:	f000 f8de 	bl	8007ab0 <__malloc_lock>
 80078f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007968 <_free_r+0x8c>)
 80078f6:	6813      	ldr	r3, [r2, #0]
 80078f8:	b933      	cbnz	r3, 8007908 <_free_r+0x2c>
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	6014      	str	r4, [r2, #0]
 80078fe:	4628      	mov	r0, r5
 8007900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007904:	f000 b8da 	b.w	8007abc <__malloc_unlock>
 8007908:	42a3      	cmp	r3, r4
 800790a:	d908      	bls.n	800791e <_free_r+0x42>
 800790c:	6820      	ldr	r0, [r4, #0]
 800790e:	1821      	adds	r1, r4, r0
 8007910:	428b      	cmp	r3, r1
 8007912:	bf01      	itttt	eq
 8007914:	6819      	ldreq	r1, [r3, #0]
 8007916:	685b      	ldreq	r3, [r3, #4]
 8007918:	1809      	addeq	r1, r1, r0
 800791a:	6021      	streq	r1, [r4, #0]
 800791c:	e7ed      	b.n	80078fa <_free_r+0x1e>
 800791e:	461a      	mov	r2, r3
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	b10b      	cbz	r3, 8007928 <_free_r+0x4c>
 8007924:	42a3      	cmp	r3, r4
 8007926:	d9fa      	bls.n	800791e <_free_r+0x42>
 8007928:	6811      	ldr	r1, [r2, #0]
 800792a:	1850      	adds	r0, r2, r1
 800792c:	42a0      	cmp	r0, r4
 800792e:	d10b      	bne.n	8007948 <_free_r+0x6c>
 8007930:	6820      	ldr	r0, [r4, #0]
 8007932:	4401      	add	r1, r0
 8007934:	1850      	adds	r0, r2, r1
 8007936:	4283      	cmp	r3, r0
 8007938:	6011      	str	r1, [r2, #0]
 800793a:	d1e0      	bne.n	80078fe <_free_r+0x22>
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4408      	add	r0, r1
 8007942:	6010      	str	r0, [r2, #0]
 8007944:	6053      	str	r3, [r2, #4]
 8007946:	e7da      	b.n	80078fe <_free_r+0x22>
 8007948:	d902      	bls.n	8007950 <_free_r+0x74>
 800794a:	230c      	movs	r3, #12
 800794c:	602b      	str	r3, [r5, #0]
 800794e:	e7d6      	b.n	80078fe <_free_r+0x22>
 8007950:	6820      	ldr	r0, [r4, #0]
 8007952:	1821      	adds	r1, r4, r0
 8007954:	428b      	cmp	r3, r1
 8007956:	bf01      	itttt	eq
 8007958:	6819      	ldreq	r1, [r3, #0]
 800795a:	685b      	ldreq	r3, [r3, #4]
 800795c:	1809      	addeq	r1, r1, r0
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	6063      	str	r3, [r4, #4]
 8007962:	6054      	str	r4, [r2, #4]
 8007964:	e7cb      	b.n	80078fe <_free_r+0x22>
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	20000a4c 	.word	0x20000a4c

0800796c <sbrk_aligned>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4e0f      	ldr	r6, [pc, #60]	@ (80079ac <sbrk_aligned+0x40>)
 8007970:	460c      	mov	r4, r1
 8007972:	6831      	ldr	r1, [r6, #0]
 8007974:	4605      	mov	r5, r0
 8007976:	b911      	cbnz	r1, 800797e <sbrk_aligned+0x12>
 8007978:	f000 fbaa 	bl	80080d0 <_sbrk_r>
 800797c:	6030      	str	r0, [r6, #0]
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f000 fba5 	bl	80080d0 <_sbrk_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d103      	bne.n	8007992 <sbrk_aligned+0x26>
 800798a:	f04f 34ff 	mov.w	r4, #4294967295
 800798e:	4620      	mov	r0, r4
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	1cc4      	adds	r4, r0, #3
 8007994:	f024 0403 	bic.w	r4, r4, #3
 8007998:	42a0      	cmp	r0, r4
 800799a:	d0f8      	beq.n	800798e <sbrk_aligned+0x22>
 800799c:	1a21      	subs	r1, r4, r0
 800799e:	4628      	mov	r0, r5
 80079a0:	f000 fb96 	bl	80080d0 <_sbrk_r>
 80079a4:	3001      	adds	r0, #1
 80079a6:	d1f2      	bne.n	800798e <sbrk_aligned+0x22>
 80079a8:	e7ef      	b.n	800798a <sbrk_aligned+0x1e>
 80079aa:	bf00      	nop
 80079ac:	20000a48 	.word	0x20000a48

080079b0 <_malloc_r>:
 80079b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b4:	1ccd      	adds	r5, r1, #3
 80079b6:	f025 0503 	bic.w	r5, r5, #3
 80079ba:	3508      	adds	r5, #8
 80079bc:	2d0c      	cmp	r5, #12
 80079be:	bf38      	it	cc
 80079c0:	250c      	movcc	r5, #12
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	4606      	mov	r6, r0
 80079c6:	db01      	blt.n	80079cc <_malloc_r+0x1c>
 80079c8:	42a9      	cmp	r1, r5
 80079ca:	d904      	bls.n	80079d6 <_malloc_r+0x26>
 80079cc:	230c      	movs	r3, #12
 80079ce:	6033      	str	r3, [r6, #0]
 80079d0:	2000      	movs	r0, #0
 80079d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007aac <_malloc_r+0xfc>
 80079da:	f000 f869 	bl	8007ab0 <__malloc_lock>
 80079de:	f8d8 3000 	ldr.w	r3, [r8]
 80079e2:	461c      	mov	r4, r3
 80079e4:	bb44      	cbnz	r4, 8007a38 <_malloc_r+0x88>
 80079e6:	4629      	mov	r1, r5
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7ff ffbf 	bl	800796c <sbrk_aligned>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	4604      	mov	r4, r0
 80079f2:	d158      	bne.n	8007aa6 <_malloc_r+0xf6>
 80079f4:	f8d8 4000 	ldr.w	r4, [r8]
 80079f8:	4627      	mov	r7, r4
 80079fa:	2f00      	cmp	r7, #0
 80079fc:	d143      	bne.n	8007a86 <_malloc_r+0xd6>
 80079fe:	2c00      	cmp	r4, #0
 8007a00:	d04b      	beq.n	8007a9a <_malloc_r+0xea>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	4639      	mov	r1, r7
 8007a06:	4630      	mov	r0, r6
 8007a08:	eb04 0903 	add.w	r9, r4, r3
 8007a0c:	f000 fb60 	bl	80080d0 <_sbrk_r>
 8007a10:	4581      	cmp	r9, r0
 8007a12:	d142      	bne.n	8007a9a <_malloc_r+0xea>
 8007a14:	6821      	ldr	r1, [r4, #0]
 8007a16:	4630      	mov	r0, r6
 8007a18:	1a6d      	subs	r5, r5, r1
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f7ff ffa6 	bl	800796c <sbrk_aligned>
 8007a20:	3001      	adds	r0, #1
 8007a22:	d03a      	beq.n	8007a9a <_malloc_r+0xea>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	442b      	add	r3, r5
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	bb62      	cbnz	r2, 8007a8c <_malloc_r+0xdc>
 8007a32:	f8c8 7000 	str.w	r7, [r8]
 8007a36:	e00f      	b.n	8007a58 <_malloc_r+0xa8>
 8007a38:	6822      	ldr	r2, [r4, #0]
 8007a3a:	1b52      	subs	r2, r2, r5
 8007a3c:	d420      	bmi.n	8007a80 <_malloc_r+0xd0>
 8007a3e:	2a0b      	cmp	r2, #11
 8007a40:	d917      	bls.n	8007a72 <_malloc_r+0xc2>
 8007a42:	1961      	adds	r1, r4, r5
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	6025      	str	r5, [r4, #0]
 8007a48:	bf18      	it	ne
 8007a4a:	6059      	strne	r1, [r3, #4]
 8007a4c:	6863      	ldr	r3, [r4, #4]
 8007a4e:	bf08      	it	eq
 8007a50:	f8c8 1000 	streq.w	r1, [r8]
 8007a54:	5162      	str	r2, [r4, r5]
 8007a56:	604b      	str	r3, [r1, #4]
 8007a58:	4630      	mov	r0, r6
 8007a5a:	f000 f82f 	bl	8007abc <__malloc_unlock>
 8007a5e:	f104 000b 	add.w	r0, r4, #11
 8007a62:	1d23      	adds	r3, r4, #4
 8007a64:	f020 0007 	bic.w	r0, r0, #7
 8007a68:	1ac2      	subs	r2, r0, r3
 8007a6a:	bf1c      	itt	ne
 8007a6c:	1a1b      	subne	r3, r3, r0
 8007a6e:	50a3      	strne	r3, [r4, r2]
 8007a70:	e7af      	b.n	80079d2 <_malloc_r+0x22>
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	bf0c      	ite	eq
 8007a78:	f8c8 2000 	streq.w	r2, [r8]
 8007a7c:	605a      	strne	r2, [r3, #4]
 8007a7e:	e7eb      	b.n	8007a58 <_malloc_r+0xa8>
 8007a80:	4623      	mov	r3, r4
 8007a82:	6864      	ldr	r4, [r4, #4]
 8007a84:	e7ae      	b.n	80079e4 <_malloc_r+0x34>
 8007a86:	463c      	mov	r4, r7
 8007a88:	687f      	ldr	r7, [r7, #4]
 8007a8a:	e7b6      	b.n	80079fa <_malloc_r+0x4a>
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	d1fb      	bne.n	8007a8c <_malloc_r+0xdc>
 8007a94:	2300      	movs	r3, #0
 8007a96:	6053      	str	r3, [r2, #4]
 8007a98:	e7de      	b.n	8007a58 <_malloc_r+0xa8>
 8007a9a:	230c      	movs	r3, #12
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	6033      	str	r3, [r6, #0]
 8007aa0:	f000 f80c 	bl	8007abc <__malloc_unlock>
 8007aa4:	e794      	b.n	80079d0 <_malloc_r+0x20>
 8007aa6:	6005      	str	r5, [r0, #0]
 8007aa8:	e7d6      	b.n	8007a58 <_malloc_r+0xa8>
 8007aaa:	bf00      	nop
 8007aac:	20000a4c 	.word	0x20000a4c

08007ab0 <__malloc_lock>:
 8007ab0:	4801      	ldr	r0, [pc, #4]	@ (8007ab8 <__malloc_lock+0x8>)
 8007ab2:	f7ff bf11 	b.w	80078d8 <__retarget_lock_acquire_recursive>
 8007ab6:	bf00      	nop
 8007ab8:	20000a44 	.word	0x20000a44

08007abc <__malloc_unlock>:
 8007abc:	4801      	ldr	r0, [pc, #4]	@ (8007ac4 <__malloc_unlock+0x8>)
 8007abe:	f7ff bf0c 	b.w	80078da <__retarget_lock_release_recursive>
 8007ac2:	bf00      	nop
 8007ac4:	20000a44 	.word	0x20000a44

08007ac8 <__ssputs_r>:
 8007ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007acc:	461f      	mov	r7, r3
 8007ace:	688e      	ldr	r6, [r1, #8]
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	42be      	cmp	r6, r7
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	4690      	mov	r8, r2
 8007ad8:	680b      	ldr	r3, [r1, #0]
 8007ada:	d82d      	bhi.n	8007b38 <__ssputs_r+0x70>
 8007adc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ae4:	d026      	beq.n	8007b34 <__ssputs_r+0x6c>
 8007ae6:	6965      	ldr	r5, [r4, #20]
 8007ae8:	6909      	ldr	r1, [r1, #16]
 8007aea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aee:	eba3 0901 	sub.w	r9, r3, r1
 8007af2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007af6:	1c7b      	adds	r3, r7, #1
 8007af8:	444b      	add	r3, r9
 8007afa:	106d      	asrs	r5, r5, #1
 8007afc:	429d      	cmp	r5, r3
 8007afe:	bf38      	it	cc
 8007b00:	461d      	movcc	r5, r3
 8007b02:	0553      	lsls	r3, r2, #21
 8007b04:	d527      	bpl.n	8007b56 <__ssputs_r+0x8e>
 8007b06:	4629      	mov	r1, r5
 8007b08:	f7ff ff52 	bl	80079b0 <_malloc_r>
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	b360      	cbz	r0, 8007b6a <__ssputs_r+0xa2>
 8007b10:	464a      	mov	r2, r9
 8007b12:	6921      	ldr	r1, [r4, #16]
 8007b14:	f000 fafa 	bl	800810c <memcpy>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	6126      	str	r6, [r4, #16]
 8007b26:	444e      	add	r6, r9
 8007b28:	6026      	str	r6, [r4, #0]
 8007b2a:	463e      	mov	r6, r7
 8007b2c:	6165      	str	r5, [r4, #20]
 8007b2e:	eba5 0509 	sub.w	r5, r5, r9
 8007b32:	60a5      	str	r5, [r4, #8]
 8007b34:	42be      	cmp	r6, r7
 8007b36:	d900      	bls.n	8007b3a <__ssputs_r+0x72>
 8007b38:	463e      	mov	r6, r7
 8007b3a:	4632      	mov	r2, r6
 8007b3c:	4641      	mov	r1, r8
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	f000 faac 	bl	800809c <memmove>
 8007b44:	2000      	movs	r0, #0
 8007b46:	68a3      	ldr	r3, [r4, #8]
 8007b48:	1b9b      	subs	r3, r3, r6
 8007b4a:	60a3      	str	r3, [r4, #8]
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	4433      	add	r3, r6
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b56:	462a      	mov	r2, r5
 8007b58:	f000 fae6 	bl	8008128 <_realloc_r>
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d1e0      	bne.n	8007b24 <__ssputs_r+0x5c>
 8007b62:	4650      	mov	r0, sl
 8007b64:	6921      	ldr	r1, [r4, #16]
 8007b66:	f7ff feb9 	bl	80078dc <_free_r>
 8007b6a:	230c      	movs	r3, #12
 8007b6c:	f8ca 3000 	str.w	r3, [sl]
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295
 8007b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	e7e9      	b.n	8007b52 <__ssputs_r+0x8a>
	...

08007b80 <_svfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	4698      	mov	r8, r3
 8007b86:	898b      	ldrh	r3, [r1, #12]
 8007b88:	4607      	mov	r7, r0
 8007b8a:	061b      	lsls	r3, r3, #24
 8007b8c:	460d      	mov	r5, r1
 8007b8e:	4614      	mov	r4, r2
 8007b90:	b09d      	sub	sp, #116	@ 0x74
 8007b92:	d510      	bpl.n	8007bb6 <_svfiprintf_r+0x36>
 8007b94:	690b      	ldr	r3, [r1, #16]
 8007b96:	b973      	cbnz	r3, 8007bb6 <_svfiprintf_r+0x36>
 8007b98:	2140      	movs	r1, #64	@ 0x40
 8007b9a:	f7ff ff09 	bl	80079b0 <_malloc_r>
 8007b9e:	6028      	str	r0, [r5, #0]
 8007ba0:	6128      	str	r0, [r5, #16]
 8007ba2:	b930      	cbnz	r0, 8007bb2 <_svfiprintf_r+0x32>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	603b      	str	r3, [r7, #0]
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	b01d      	add	sp, #116	@ 0x74
 8007bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb2:	2340      	movs	r3, #64	@ 0x40
 8007bb4:	616b      	str	r3, [r5, #20]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bba:	2320      	movs	r3, #32
 8007bbc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bc0:	2330      	movs	r3, #48	@ 0x30
 8007bc2:	f04f 0901 	mov.w	r9, #1
 8007bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007d64 <_svfiprintf_r+0x1e4>
 8007bce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bd2:	4623      	mov	r3, r4
 8007bd4:	469a      	mov	sl, r3
 8007bd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bda:	b10a      	cbz	r2, 8007be0 <_svfiprintf_r+0x60>
 8007bdc:	2a25      	cmp	r2, #37	@ 0x25
 8007bde:	d1f9      	bne.n	8007bd4 <_svfiprintf_r+0x54>
 8007be0:	ebba 0b04 	subs.w	fp, sl, r4
 8007be4:	d00b      	beq.n	8007bfe <_svfiprintf_r+0x7e>
 8007be6:	465b      	mov	r3, fp
 8007be8:	4622      	mov	r2, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	4638      	mov	r0, r7
 8007bee:	f7ff ff6b 	bl	8007ac8 <__ssputs_r>
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f000 80a7 	beq.w	8007d46 <_svfiprintf_r+0x1c6>
 8007bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bfa:	445a      	add	r2, fp
 8007bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 809f 	beq.w	8007d46 <_svfiprintf_r+0x1c6>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c12:	f10a 0a01 	add.w	sl, sl, #1
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c20:	4654      	mov	r4, sl
 8007c22:	2205      	movs	r2, #5
 8007c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c28:	484e      	ldr	r0, [pc, #312]	@ (8007d64 <_svfiprintf_r+0x1e4>)
 8007c2a:	f000 fa61 	bl	80080f0 <memchr>
 8007c2e:	9a04      	ldr	r2, [sp, #16]
 8007c30:	b9d8      	cbnz	r0, 8007c6a <_svfiprintf_r+0xea>
 8007c32:	06d0      	lsls	r0, r2, #27
 8007c34:	bf44      	itt	mi
 8007c36:	2320      	movmi	r3, #32
 8007c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c3c:	0711      	lsls	r1, r2, #28
 8007c3e:	bf44      	itt	mi
 8007c40:	232b      	movmi	r3, #43	@ 0x2b
 8007c42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c46:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c4c:	d015      	beq.n	8007c7a <_svfiprintf_r+0xfa>
 8007c4e:	4654      	mov	r4, sl
 8007c50:	2000      	movs	r0, #0
 8007c52:	f04f 0c0a 	mov.w	ip, #10
 8007c56:	9a07      	ldr	r2, [sp, #28]
 8007c58:	4621      	mov	r1, r4
 8007c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c5e:	3b30      	subs	r3, #48	@ 0x30
 8007c60:	2b09      	cmp	r3, #9
 8007c62:	d94b      	bls.n	8007cfc <_svfiprintf_r+0x17c>
 8007c64:	b1b0      	cbz	r0, 8007c94 <_svfiprintf_r+0x114>
 8007c66:	9207      	str	r2, [sp, #28]
 8007c68:	e014      	b.n	8007c94 <_svfiprintf_r+0x114>
 8007c6a:	eba0 0308 	sub.w	r3, r0, r8
 8007c6e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c72:	4313      	orrs	r3, r2
 8007c74:	46a2      	mov	sl, r4
 8007c76:	9304      	str	r3, [sp, #16]
 8007c78:	e7d2      	b.n	8007c20 <_svfiprintf_r+0xa0>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	1d19      	adds	r1, r3, #4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	9103      	str	r1, [sp, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bfbb      	ittet	lt
 8007c86:	425b      	neglt	r3, r3
 8007c88:	f042 0202 	orrlt.w	r2, r2, #2
 8007c8c:	9307      	strge	r3, [sp, #28]
 8007c8e:	9307      	strlt	r3, [sp, #28]
 8007c90:	bfb8      	it	lt
 8007c92:	9204      	strlt	r2, [sp, #16]
 8007c94:	7823      	ldrb	r3, [r4, #0]
 8007c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c98:	d10a      	bne.n	8007cb0 <_svfiprintf_r+0x130>
 8007c9a:	7863      	ldrb	r3, [r4, #1]
 8007c9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c9e:	d132      	bne.n	8007d06 <_svfiprintf_r+0x186>
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	3402      	adds	r4, #2
 8007ca4:	1d1a      	adds	r2, r3, #4
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	9203      	str	r2, [sp, #12]
 8007caa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cae:	9305      	str	r3, [sp, #20]
 8007cb0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007d68 <_svfiprintf_r+0x1e8>
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	4650      	mov	r0, sl
 8007cb8:	7821      	ldrb	r1, [r4, #0]
 8007cba:	f000 fa19 	bl	80080f0 <memchr>
 8007cbe:	b138      	cbz	r0, 8007cd0 <_svfiprintf_r+0x150>
 8007cc0:	2240      	movs	r2, #64	@ 0x40
 8007cc2:	9b04      	ldr	r3, [sp, #16]
 8007cc4:	eba0 000a 	sub.w	r0, r0, sl
 8007cc8:	4082      	lsls	r2, r0
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	3401      	adds	r4, #1
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd4:	2206      	movs	r2, #6
 8007cd6:	4825      	ldr	r0, [pc, #148]	@ (8007d6c <_svfiprintf_r+0x1ec>)
 8007cd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cdc:	f000 fa08 	bl	80080f0 <memchr>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d036      	beq.n	8007d52 <_svfiprintf_r+0x1d2>
 8007ce4:	4b22      	ldr	r3, [pc, #136]	@ (8007d70 <_svfiprintf_r+0x1f0>)
 8007ce6:	bb1b      	cbnz	r3, 8007d30 <_svfiprintf_r+0x1b0>
 8007ce8:	9b03      	ldr	r3, [sp, #12]
 8007cea:	3307      	adds	r3, #7
 8007cec:	f023 0307 	bic.w	r3, r3, #7
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	9303      	str	r3, [sp, #12]
 8007cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf6:	4433      	add	r3, r6
 8007cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfa:	e76a      	b.n	8007bd2 <_svfiprintf_r+0x52>
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	2001      	movs	r0, #1
 8007d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d04:	e7a8      	b.n	8007c58 <_svfiprintf_r+0xd8>
 8007d06:	2300      	movs	r3, #0
 8007d08:	f04f 0c0a 	mov.w	ip, #10
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	3401      	adds	r4, #1
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	4620      	mov	r0, r4
 8007d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d18:	3a30      	subs	r2, #48	@ 0x30
 8007d1a:	2a09      	cmp	r2, #9
 8007d1c:	d903      	bls.n	8007d26 <_svfiprintf_r+0x1a6>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0c6      	beq.n	8007cb0 <_svfiprintf_r+0x130>
 8007d22:	9105      	str	r1, [sp, #20]
 8007d24:	e7c4      	b.n	8007cb0 <_svfiprintf_r+0x130>
 8007d26:	4604      	mov	r4, r0
 8007d28:	2301      	movs	r3, #1
 8007d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d2e:	e7f0      	b.n	8007d12 <_svfiprintf_r+0x192>
 8007d30:	ab03      	add	r3, sp, #12
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	462a      	mov	r2, r5
 8007d36:	4638      	mov	r0, r7
 8007d38:	4b0e      	ldr	r3, [pc, #56]	@ (8007d74 <_svfiprintf_r+0x1f4>)
 8007d3a:	a904      	add	r1, sp, #16
 8007d3c:	f3af 8000 	nop.w
 8007d40:	1c42      	adds	r2, r0, #1
 8007d42:	4606      	mov	r6, r0
 8007d44:	d1d6      	bne.n	8007cf4 <_svfiprintf_r+0x174>
 8007d46:	89ab      	ldrh	r3, [r5, #12]
 8007d48:	065b      	lsls	r3, r3, #25
 8007d4a:	f53f af2d 	bmi.w	8007ba8 <_svfiprintf_r+0x28>
 8007d4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d50:	e72c      	b.n	8007bac <_svfiprintf_r+0x2c>
 8007d52:	ab03      	add	r3, sp, #12
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	462a      	mov	r2, r5
 8007d58:	4638      	mov	r0, r7
 8007d5a:	4b06      	ldr	r3, [pc, #24]	@ (8007d74 <_svfiprintf_r+0x1f4>)
 8007d5c:	a904      	add	r1, sp, #16
 8007d5e:	f000 f87d 	bl	8007e5c <_printf_i>
 8007d62:	e7ed      	b.n	8007d40 <_svfiprintf_r+0x1c0>
 8007d64:	080081fa 	.word	0x080081fa
 8007d68:	08008200 	.word	0x08008200
 8007d6c:	08008204 	.word	0x08008204
 8007d70:	00000000 	.word	0x00000000
 8007d74:	08007ac9 	.word	0x08007ac9

08007d78 <_printf_common>:
 8007d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	4616      	mov	r6, r2
 8007d7e:	4698      	mov	r8, r3
 8007d80:	688a      	ldr	r2, [r1, #8]
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	4607      	mov	r7, r0
 8007d86:	4293      	cmp	r3, r2
 8007d88:	bfb8      	it	lt
 8007d8a:	4613      	movlt	r3, r2
 8007d8c:	6033      	str	r3, [r6, #0]
 8007d8e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d92:	460c      	mov	r4, r1
 8007d94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d98:	b10a      	cbz	r2, 8007d9e <_printf_common+0x26>
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	6033      	str	r3, [r6, #0]
 8007d9e:	6823      	ldr	r3, [r4, #0]
 8007da0:	0699      	lsls	r1, r3, #26
 8007da2:	bf42      	ittt	mi
 8007da4:	6833      	ldrmi	r3, [r6, #0]
 8007da6:	3302      	addmi	r3, #2
 8007da8:	6033      	strmi	r3, [r6, #0]
 8007daa:	6825      	ldr	r5, [r4, #0]
 8007dac:	f015 0506 	ands.w	r5, r5, #6
 8007db0:	d106      	bne.n	8007dc0 <_printf_common+0x48>
 8007db2:	f104 0a19 	add.w	sl, r4, #25
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	6832      	ldr	r2, [r6, #0]
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	42ab      	cmp	r3, r5
 8007dbe:	dc2b      	bgt.n	8007e18 <_printf_common+0xa0>
 8007dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dc4:	6822      	ldr	r2, [r4, #0]
 8007dc6:	3b00      	subs	r3, #0
 8007dc8:	bf18      	it	ne
 8007dca:	2301      	movne	r3, #1
 8007dcc:	0692      	lsls	r2, r2, #26
 8007dce:	d430      	bmi.n	8007e32 <_printf_common+0xba>
 8007dd0:	4641      	mov	r1, r8
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dd8:	47c8      	blx	r9
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d023      	beq.n	8007e26 <_printf_common+0xae>
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	f003 0306 	and.w	r3, r3, #6
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	bf14      	ite	ne
 8007dea:	2500      	movne	r5, #0
 8007dec:	6833      	ldreq	r3, [r6, #0]
 8007dee:	f04f 0600 	mov.w	r6, #0
 8007df2:	bf08      	it	eq
 8007df4:	68e5      	ldreq	r5, [r4, #12]
 8007df6:	f104 041a 	add.w	r4, r4, #26
 8007dfa:	bf08      	it	eq
 8007dfc:	1aed      	subeq	r5, r5, r3
 8007dfe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007e02:	bf08      	it	eq
 8007e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	bfc4      	itt	gt
 8007e0c:	1a9b      	subgt	r3, r3, r2
 8007e0e:	18ed      	addgt	r5, r5, r3
 8007e10:	42b5      	cmp	r5, r6
 8007e12:	d11a      	bne.n	8007e4a <_printf_common+0xd2>
 8007e14:	2000      	movs	r0, #0
 8007e16:	e008      	b.n	8007e2a <_printf_common+0xb2>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	4638      	mov	r0, r7
 8007e20:	47c8      	blx	r9
 8007e22:	3001      	adds	r0, #1
 8007e24:	d103      	bne.n	8007e2e <_printf_common+0xb6>
 8007e26:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2e:	3501      	adds	r5, #1
 8007e30:	e7c1      	b.n	8007db6 <_printf_common+0x3e>
 8007e32:	2030      	movs	r0, #48	@ 0x30
 8007e34:	18e1      	adds	r1, r4, r3
 8007e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e40:	4422      	add	r2, r4
 8007e42:	3302      	adds	r3, #2
 8007e44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e48:	e7c2      	b.n	8007dd0 <_printf_common+0x58>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	4641      	mov	r1, r8
 8007e50:	4638      	mov	r0, r7
 8007e52:	47c8      	blx	r9
 8007e54:	3001      	adds	r0, #1
 8007e56:	d0e6      	beq.n	8007e26 <_printf_common+0xae>
 8007e58:	3601      	adds	r6, #1
 8007e5a:	e7d9      	b.n	8007e10 <_printf_common+0x98>

08007e5c <_printf_i>:
 8007e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	7e0f      	ldrb	r7, [r1, #24]
 8007e62:	4691      	mov	r9, r2
 8007e64:	2f78      	cmp	r7, #120	@ 0x78
 8007e66:	4680      	mov	r8, r0
 8007e68:	460c      	mov	r4, r1
 8007e6a:	469a      	mov	sl, r3
 8007e6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e72:	d807      	bhi.n	8007e84 <_printf_i+0x28>
 8007e74:	2f62      	cmp	r7, #98	@ 0x62
 8007e76:	d80a      	bhi.n	8007e8e <_printf_i+0x32>
 8007e78:	2f00      	cmp	r7, #0
 8007e7a:	f000 80d3 	beq.w	8008024 <_printf_i+0x1c8>
 8007e7e:	2f58      	cmp	r7, #88	@ 0x58
 8007e80:	f000 80ba 	beq.w	8007ff8 <_printf_i+0x19c>
 8007e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e8c:	e03a      	b.n	8007f04 <_printf_i+0xa8>
 8007e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e92:	2b15      	cmp	r3, #21
 8007e94:	d8f6      	bhi.n	8007e84 <_printf_i+0x28>
 8007e96:	a101      	add	r1, pc, #4	@ (adr r1, 8007e9c <_printf_i+0x40>)
 8007e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e9c:	08007ef5 	.word	0x08007ef5
 8007ea0:	08007f09 	.word	0x08007f09
 8007ea4:	08007e85 	.word	0x08007e85
 8007ea8:	08007e85 	.word	0x08007e85
 8007eac:	08007e85 	.word	0x08007e85
 8007eb0:	08007e85 	.word	0x08007e85
 8007eb4:	08007f09 	.word	0x08007f09
 8007eb8:	08007e85 	.word	0x08007e85
 8007ebc:	08007e85 	.word	0x08007e85
 8007ec0:	08007e85 	.word	0x08007e85
 8007ec4:	08007e85 	.word	0x08007e85
 8007ec8:	0800800b 	.word	0x0800800b
 8007ecc:	08007f33 	.word	0x08007f33
 8007ed0:	08007fc5 	.word	0x08007fc5
 8007ed4:	08007e85 	.word	0x08007e85
 8007ed8:	08007e85 	.word	0x08007e85
 8007edc:	0800802d 	.word	0x0800802d
 8007ee0:	08007e85 	.word	0x08007e85
 8007ee4:	08007f33 	.word	0x08007f33
 8007ee8:	08007e85 	.word	0x08007e85
 8007eec:	08007e85 	.word	0x08007e85
 8007ef0:	08007fcd 	.word	0x08007fcd
 8007ef4:	6833      	ldr	r3, [r6, #0]
 8007ef6:	1d1a      	adds	r2, r3, #4
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6032      	str	r2, [r6, #0]
 8007efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f04:	2301      	movs	r3, #1
 8007f06:	e09e      	b.n	8008046 <_printf_i+0x1ea>
 8007f08:	6833      	ldr	r3, [r6, #0]
 8007f0a:	6820      	ldr	r0, [r4, #0]
 8007f0c:	1d19      	adds	r1, r3, #4
 8007f0e:	6031      	str	r1, [r6, #0]
 8007f10:	0606      	lsls	r6, r0, #24
 8007f12:	d501      	bpl.n	8007f18 <_printf_i+0xbc>
 8007f14:	681d      	ldr	r5, [r3, #0]
 8007f16:	e003      	b.n	8007f20 <_printf_i+0xc4>
 8007f18:	0645      	lsls	r5, r0, #25
 8007f1a:	d5fb      	bpl.n	8007f14 <_printf_i+0xb8>
 8007f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f20:	2d00      	cmp	r5, #0
 8007f22:	da03      	bge.n	8007f2c <_printf_i+0xd0>
 8007f24:	232d      	movs	r3, #45	@ 0x2d
 8007f26:	426d      	negs	r5, r5
 8007f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f2c:	230a      	movs	r3, #10
 8007f2e:	4859      	ldr	r0, [pc, #356]	@ (8008094 <_printf_i+0x238>)
 8007f30:	e011      	b.n	8007f56 <_printf_i+0xfa>
 8007f32:	6821      	ldr	r1, [r4, #0]
 8007f34:	6833      	ldr	r3, [r6, #0]
 8007f36:	0608      	lsls	r0, r1, #24
 8007f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f3c:	d402      	bmi.n	8007f44 <_printf_i+0xe8>
 8007f3e:	0649      	lsls	r1, r1, #25
 8007f40:	bf48      	it	mi
 8007f42:	b2ad      	uxthmi	r5, r5
 8007f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f46:	6033      	str	r3, [r6, #0]
 8007f48:	bf14      	ite	ne
 8007f4a:	230a      	movne	r3, #10
 8007f4c:	2308      	moveq	r3, #8
 8007f4e:	4851      	ldr	r0, [pc, #324]	@ (8008094 <_printf_i+0x238>)
 8007f50:	2100      	movs	r1, #0
 8007f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f56:	6866      	ldr	r6, [r4, #4]
 8007f58:	2e00      	cmp	r6, #0
 8007f5a:	bfa8      	it	ge
 8007f5c:	6821      	ldrge	r1, [r4, #0]
 8007f5e:	60a6      	str	r6, [r4, #8]
 8007f60:	bfa4      	itt	ge
 8007f62:	f021 0104 	bicge.w	r1, r1, #4
 8007f66:	6021      	strge	r1, [r4, #0]
 8007f68:	b90d      	cbnz	r5, 8007f6e <_printf_i+0x112>
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	d04b      	beq.n	8008006 <_printf_i+0x1aa>
 8007f6e:	4616      	mov	r6, r2
 8007f70:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f74:	fb03 5711 	mls	r7, r3, r1, r5
 8007f78:	5dc7      	ldrb	r7, [r0, r7]
 8007f7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f7e:	462f      	mov	r7, r5
 8007f80:	42bb      	cmp	r3, r7
 8007f82:	460d      	mov	r5, r1
 8007f84:	d9f4      	bls.n	8007f70 <_printf_i+0x114>
 8007f86:	2b08      	cmp	r3, #8
 8007f88:	d10b      	bne.n	8007fa2 <_printf_i+0x146>
 8007f8a:	6823      	ldr	r3, [r4, #0]
 8007f8c:	07df      	lsls	r7, r3, #31
 8007f8e:	d508      	bpl.n	8007fa2 <_printf_i+0x146>
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	6861      	ldr	r1, [r4, #4]
 8007f94:	4299      	cmp	r1, r3
 8007f96:	bfde      	ittt	le
 8007f98:	2330      	movle	r3, #48	@ 0x30
 8007f9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fa2:	1b92      	subs	r2, r2, r6
 8007fa4:	6122      	str	r2, [r4, #16]
 8007fa6:	464b      	mov	r3, r9
 8007fa8:	4621      	mov	r1, r4
 8007faa:	4640      	mov	r0, r8
 8007fac:	f8cd a000 	str.w	sl, [sp]
 8007fb0:	aa03      	add	r2, sp, #12
 8007fb2:	f7ff fee1 	bl	8007d78 <_printf_common>
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d14a      	bne.n	8008050 <_printf_i+0x1f4>
 8007fba:	f04f 30ff 	mov.w	r0, #4294967295
 8007fbe:	b004      	add	sp, #16
 8007fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	f043 0320 	orr.w	r3, r3, #32
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	2778      	movs	r7, #120	@ 0x78
 8007fce:	4832      	ldr	r0, [pc, #200]	@ (8008098 <_printf_i+0x23c>)
 8007fd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	6831      	ldr	r1, [r6, #0]
 8007fd8:	061f      	lsls	r7, r3, #24
 8007fda:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fde:	d402      	bmi.n	8007fe6 <_printf_i+0x18a>
 8007fe0:	065f      	lsls	r7, r3, #25
 8007fe2:	bf48      	it	mi
 8007fe4:	b2ad      	uxthmi	r5, r5
 8007fe6:	6031      	str	r1, [r6, #0]
 8007fe8:	07d9      	lsls	r1, r3, #31
 8007fea:	bf44      	itt	mi
 8007fec:	f043 0320 	orrmi.w	r3, r3, #32
 8007ff0:	6023      	strmi	r3, [r4, #0]
 8007ff2:	b11d      	cbz	r5, 8007ffc <_printf_i+0x1a0>
 8007ff4:	2310      	movs	r3, #16
 8007ff6:	e7ab      	b.n	8007f50 <_printf_i+0xf4>
 8007ff8:	4826      	ldr	r0, [pc, #152]	@ (8008094 <_printf_i+0x238>)
 8007ffa:	e7e9      	b.n	8007fd0 <_printf_i+0x174>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	f023 0320 	bic.w	r3, r3, #32
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	e7f6      	b.n	8007ff4 <_printf_i+0x198>
 8008006:	4616      	mov	r6, r2
 8008008:	e7bd      	b.n	8007f86 <_printf_i+0x12a>
 800800a:	6833      	ldr	r3, [r6, #0]
 800800c:	6825      	ldr	r5, [r4, #0]
 800800e:	1d18      	adds	r0, r3, #4
 8008010:	6961      	ldr	r1, [r4, #20]
 8008012:	6030      	str	r0, [r6, #0]
 8008014:	062e      	lsls	r6, r5, #24
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	d501      	bpl.n	800801e <_printf_i+0x1c2>
 800801a:	6019      	str	r1, [r3, #0]
 800801c:	e002      	b.n	8008024 <_printf_i+0x1c8>
 800801e:	0668      	lsls	r0, r5, #25
 8008020:	d5fb      	bpl.n	800801a <_printf_i+0x1be>
 8008022:	8019      	strh	r1, [r3, #0]
 8008024:	2300      	movs	r3, #0
 8008026:	4616      	mov	r6, r2
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	e7bc      	b.n	8007fa6 <_printf_i+0x14a>
 800802c:	6833      	ldr	r3, [r6, #0]
 800802e:	2100      	movs	r1, #0
 8008030:	1d1a      	adds	r2, r3, #4
 8008032:	6032      	str	r2, [r6, #0]
 8008034:	681e      	ldr	r6, [r3, #0]
 8008036:	6862      	ldr	r2, [r4, #4]
 8008038:	4630      	mov	r0, r6
 800803a:	f000 f859 	bl	80080f0 <memchr>
 800803e:	b108      	cbz	r0, 8008044 <_printf_i+0x1e8>
 8008040:	1b80      	subs	r0, r0, r6
 8008042:	6060      	str	r0, [r4, #4]
 8008044:	6863      	ldr	r3, [r4, #4]
 8008046:	6123      	str	r3, [r4, #16]
 8008048:	2300      	movs	r3, #0
 800804a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800804e:	e7aa      	b.n	8007fa6 <_printf_i+0x14a>
 8008050:	4632      	mov	r2, r6
 8008052:	4649      	mov	r1, r9
 8008054:	4640      	mov	r0, r8
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	47d0      	blx	sl
 800805a:	3001      	adds	r0, #1
 800805c:	d0ad      	beq.n	8007fba <_printf_i+0x15e>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	079b      	lsls	r3, r3, #30
 8008062:	d413      	bmi.n	800808c <_printf_i+0x230>
 8008064:	68e0      	ldr	r0, [r4, #12]
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	4298      	cmp	r0, r3
 800806a:	bfb8      	it	lt
 800806c:	4618      	movlt	r0, r3
 800806e:	e7a6      	b.n	8007fbe <_printf_i+0x162>
 8008070:	2301      	movs	r3, #1
 8008072:	4632      	mov	r2, r6
 8008074:	4649      	mov	r1, r9
 8008076:	4640      	mov	r0, r8
 8008078:	47d0      	blx	sl
 800807a:	3001      	adds	r0, #1
 800807c:	d09d      	beq.n	8007fba <_printf_i+0x15e>
 800807e:	3501      	adds	r5, #1
 8008080:	68e3      	ldr	r3, [r4, #12]
 8008082:	9903      	ldr	r1, [sp, #12]
 8008084:	1a5b      	subs	r3, r3, r1
 8008086:	42ab      	cmp	r3, r5
 8008088:	dcf2      	bgt.n	8008070 <_printf_i+0x214>
 800808a:	e7eb      	b.n	8008064 <_printf_i+0x208>
 800808c:	2500      	movs	r5, #0
 800808e:	f104 0619 	add.w	r6, r4, #25
 8008092:	e7f5      	b.n	8008080 <_printf_i+0x224>
 8008094:	0800820b 	.word	0x0800820b
 8008098:	0800821c 	.word	0x0800821c

0800809c <memmove>:
 800809c:	4288      	cmp	r0, r1
 800809e:	b510      	push	{r4, lr}
 80080a0:	eb01 0402 	add.w	r4, r1, r2
 80080a4:	d902      	bls.n	80080ac <memmove+0x10>
 80080a6:	4284      	cmp	r4, r0
 80080a8:	4623      	mov	r3, r4
 80080aa:	d807      	bhi.n	80080bc <memmove+0x20>
 80080ac:	1e43      	subs	r3, r0, #1
 80080ae:	42a1      	cmp	r1, r4
 80080b0:	d008      	beq.n	80080c4 <memmove+0x28>
 80080b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080ba:	e7f8      	b.n	80080ae <memmove+0x12>
 80080bc:	4601      	mov	r1, r0
 80080be:	4402      	add	r2, r0
 80080c0:	428a      	cmp	r2, r1
 80080c2:	d100      	bne.n	80080c6 <memmove+0x2a>
 80080c4:	bd10      	pop	{r4, pc}
 80080c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080ce:	e7f7      	b.n	80080c0 <memmove+0x24>

080080d0 <_sbrk_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	2300      	movs	r3, #0
 80080d4:	4d05      	ldr	r5, [pc, #20]	@ (80080ec <_sbrk_r+0x1c>)
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7fa fa92 	bl	8002604 <_sbrk>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_sbrk_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_sbrk_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20000a40 	.word	0x20000a40

080080f0 <memchr>:
 80080f0:	4603      	mov	r3, r0
 80080f2:	b510      	push	{r4, lr}
 80080f4:	b2c9      	uxtb	r1, r1
 80080f6:	4402      	add	r2, r0
 80080f8:	4293      	cmp	r3, r2
 80080fa:	4618      	mov	r0, r3
 80080fc:	d101      	bne.n	8008102 <memchr+0x12>
 80080fe:	2000      	movs	r0, #0
 8008100:	e003      	b.n	800810a <memchr+0x1a>
 8008102:	7804      	ldrb	r4, [r0, #0]
 8008104:	3301      	adds	r3, #1
 8008106:	428c      	cmp	r4, r1
 8008108:	d1f6      	bne.n	80080f8 <memchr+0x8>
 800810a:	bd10      	pop	{r4, pc}

0800810c <memcpy>:
 800810c:	440a      	add	r2, r1
 800810e:	4291      	cmp	r1, r2
 8008110:	f100 33ff 	add.w	r3, r0, #4294967295
 8008114:	d100      	bne.n	8008118 <memcpy+0xc>
 8008116:	4770      	bx	lr
 8008118:	b510      	push	{r4, lr}
 800811a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811e:	4291      	cmp	r1, r2
 8008120:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008124:	d1f9      	bne.n	800811a <memcpy+0xe>
 8008126:	bd10      	pop	{r4, pc}

08008128 <_realloc_r>:
 8008128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812c:	4680      	mov	r8, r0
 800812e:	4615      	mov	r5, r2
 8008130:	460c      	mov	r4, r1
 8008132:	b921      	cbnz	r1, 800813e <_realloc_r+0x16>
 8008134:	4611      	mov	r1, r2
 8008136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800813a:	f7ff bc39 	b.w	80079b0 <_malloc_r>
 800813e:	b92a      	cbnz	r2, 800814c <_realloc_r+0x24>
 8008140:	f7ff fbcc 	bl	80078dc <_free_r>
 8008144:	2400      	movs	r4, #0
 8008146:	4620      	mov	r0, r4
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814c:	f000 f81a 	bl	8008184 <_malloc_usable_size_r>
 8008150:	4285      	cmp	r5, r0
 8008152:	4606      	mov	r6, r0
 8008154:	d802      	bhi.n	800815c <_realloc_r+0x34>
 8008156:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800815a:	d8f4      	bhi.n	8008146 <_realloc_r+0x1e>
 800815c:	4629      	mov	r1, r5
 800815e:	4640      	mov	r0, r8
 8008160:	f7ff fc26 	bl	80079b0 <_malloc_r>
 8008164:	4607      	mov	r7, r0
 8008166:	2800      	cmp	r0, #0
 8008168:	d0ec      	beq.n	8008144 <_realloc_r+0x1c>
 800816a:	42b5      	cmp	r5, r6
 800816c:	462a      	mov	r2, r5
 800816e:	4621      	mov	r1, r4
 8008170:	bf28      	it	cs
 8008172:	4632      	movcs	r2, r6
 8008174:	f7ff ffca 	bl	800810c <memcpy>
 8008178:	4621      	mov	r1, r4
 800817a:	4640      	mov	r0, r8
 800817c:	f7ff fbae 	bl	80078dc <_free_r>
 8008180:	463c      	mov	r4, r7
 8008182:	e7e0      	b.n	8008146 <_realloc_r+0x1e>

08008184 <_malloc_usable_size_r>:
 8008184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008188:	1f18      	subs	r0, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	bfbc      	itt	lt
 800818e:	580b      	ldrlt	r3, [r1, r0]
 8008190:	18c0      	addlt	r0, r0, r3
 8008192:	4770      	bx	lr

08008194 <_init>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr

080081a0 <_fini>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	bf00      	nop
 80081a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a6:	bc08      	pop	{r3}
 80081a8:	469e      	mov	lr, r3
 80081aa:	4770      	bx	lr
